// This file is auto-generated by @hey-api/openapi-ts

export type GetV3SecureScaSessionsByScaSessionTokenData = {
    body?: never;
    headers?: {
        'X-Qonto-Staging-Token'?: string;
    };
    path: {
        sca_session_token: string;
    };
    query?: never;
    url: '/v3/secure/sca_sessions/{sca_session_token}';
};

export type GetV3SecureScaSessionsByScaSessionTokenResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GetOauth2AuthData = {
    body?: never;
    path?: never;
    query?: {
        client_id?: string;
        redirect_uri?: string;
        scope?: string;
        response_type?: string;
        state?: string;
    };
    url: '/oauth2/auth';
};

export type GetOauth2AuthResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type PostOauth2TokenData = {
    body?: {
        client_id?: string;
        client_secret?: string;
        refresh_token?: string;
        redirect_uri?: string;
        grant_type?: string;
    };
    path?: never;
    query?: never;
    url: '/oauth2/token';
};

export type PostOauth2TokenResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type GetV2ExternalTransfersByIdData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/v2/external_transfers/{id}';
};

export type GetV2ExternalTransfersByIdErrors = {
    /**
     * Not Found
     */
    404: {
        [key: string]: unknown;
    };
};

export type GetV2ExternalTransfersByIdError = GetV2ExternalTransfersByIdErrors[keyof GetV2ExternalTransfersByIdErrors];

export type GetV2ExternalTransfersByIdResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2ExternalTransfersByIdResponse = GetV2ExternalTransfersByIdResponses[keyof GetV2ExternalTransfersByIdResponses];

export type GetV2ExternalTransfersData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/external_transfers';
};

export type GetV2ExternalTransfersErrors = {
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
};

export type GetV2ExternalTransfersError = GetV2ExternalTransfersErrors[keyof GetV2ExternalTransfersErrors];

export type GetV2ExternalTransfersResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2ExternalTransfersResponse = GetV2ExternalTransfersResponses[keyof GetV2ExternalTransfersResponses];

export type PostV2ExternalTransfersData = {
    body?: {
        [key: string]: unknown;
    };
    headers?: {
        /**
         * (Required) This parameter is required. The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. The idempotency key must be a unique string. We recommend using a UUID.
         */
        'X-Qonto-Idempotency-Key'?: string;
        'Content-Type'?: string;
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/external_transfers';
};

export type PostV2ExternalTransfersErrors = {
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
};

export type PostV2ExternalTransfersError = PostV2ExternalTransfersErrors[keyof PostV2ExternalTransfersErrors];

export type PostV2ExternalTransfersResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostV2ExternalTransfersResponse = PostV2ExternalTransfersResponses[keyof PostV2ExternalTransfersResponses];

export type PostV2ExternalTransfersCheckoutData = {
    body?: {
        [key: string]: unknown;
    };
    headers?: {
        'Content-Type'?: string;
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
        /**
         * If no header is present, the default becomes paired-device
         */
        'X-Qonto-2fa-Preference'?: string;
        'X-Qonto-Sca-Session-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/external_transfers/checkout';
};

export type PostV2ExternalTransfersCheckoutErrors = {
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
};

export type PostV2ExternalTransfersCheckoutError = PostV2ExternalTransfersCheckoutErrors[keyof PostV2ExternalTransfersCheckoutErrors];

export type PostV2ExternalTransfersCheckoutResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostV2ExternalTransfersCheckoutResponse = PostV2ExternalTransfersCheckoutResponses[keyof PostV2ExternalTransfersCheckoutResponses];

export type GetV2BeneficiariesData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/beneficiaries';
};

export type GetV2BeneficiariesErrors = {
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
};

export type GetV2BeneficiariesError = GetV2BeneficiariesErrors[keyof GetV2BeneficiariesErrors];

export type GetV2BeneficiariesResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2BeneficiariesResponse = GetV2BeneficiariesResponses[keyof GetV2BeneficiariesResponses];

export type GetV2BeneficiariesByIdData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path: {
        /**
         * (Required)
         */
        id: string;
    };
    query?: never;
    url: '/v2/beneficiaries/{id}';
};

export type GetV2BeneficiariesByIdErrors = {
    /**
     * Not Found
     */
    404: {
        [key: string]: unknown;
    };
};

export type GetV2BeneficiariesByIdError = GetV2BeneficiariesByIdErrors[keyof GetV2BeneficiariesByIdErrors];

export type GetV2BeneficiariesByIdResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2BeneficiariesByIdResponse = GetV2BeneficiariesByIdResponses[keyof GetV2BeneficiariesByIdResponses];

export type PatchV2BeneficiariesUntrustData = {
    body?: {
        [key: string]: unknown;
    };
    headers?: {
        'Content-Type'?: string;
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/beneficiaries/untrust';
};

export type PatchV2BeneficiariesUntrustErrors = {
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
};

export type PatchV2BeneficiariesUntrustError = PatchV2BeneficiariesUntrustErrors[keyof PatchV2BeneficiariesUntrustErrors];

export type PatchV2BeneficiariesUntrustResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PatchV2BeneficiariesUntrustResponse = PatchV2BeneficiariesUntrustResponses[keyof PatchV2BeneficiariesUntrustResponses];

export type PostV2AttachmentsData = {
    body?: {
        file?: string;
    };
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/attachments';
};

export type PostV2AttachmentsErrors = {
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
};

export type PostV2AttachmentsError = PostV2AttachmentsErrors[keyof PostV2AttachmentsErrors];

export type PostV2AttachmentsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostV2AttachmentsResponse = PostV2AttachmentsResponses[keyof PostV2AttachmentsResponses];

export type GetV2AttachmentsByIdData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path: {
        /**
         * (Required)
         */
        id: string;
    };
    query?: never;
    url: '/v2/attachments/{id}';
};

export type GetV2AttachmentsByIdErrors = {
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
};

export type GetV2AttachmentsByIdError = GetV2AttachmentsByIdErrors[keyof GetV2AttachmentsByIdErrors];

export type GetV2AttachmentsByIdResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2AttachmentsByIdResponse = GetV2AttachmentsByIdResponses[keyof GetV2AttachmentsByIdResponses];

export type GetV2LabelsData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/labels';
};

export type GetV2LabelsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2LabelsResponse = GetV2LabelsResponses[keyof GetV2LabelsResponses];

export type GetV2LabelsByIdData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path: {
        /**
         * (Required)
         */
        id: string;
    };
    query?: never;
    url: '/v2/labels/{id}';
};

export type GetV2LabelsByIdResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2LabelsByIdResponse = GetV2LabelsByIdResponses[keyof GetV2LabelsByIdResponses];

export type GetV2MembershipsData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/memberships';
};

export type GetV2MembershipsErrors = {
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
};

export type GetV2MembershipsError = GetV2MembershipsErrors[keyof GetV2MembershipsErrors];

export type GetV2MembershipsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2MembershipsResponse = GetV2MembershipsResponses[keyof GetV2MembershipsResponses];

export type GetV2MembershipData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/membership';
};

export type GetV2MembershipErrors = {
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
};

export type GetV2MembershipError = GetV2MembershipErrors[keyof GetV2MembershipErrors];

export type GetV2MembershipResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2MembershipResponse = GetV2MembershipResponses[keyof GetV2MembershipResponses];

export type PostV2MembershipsInviteEmployeeOrAccountantData = {
    body?: {
        [key: string]: unknown;
    };
    headers?: {
        'Content-Type'?: string;
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/memberships/invite_employee_or_accountant';
};

export type PostV2MembershipsInviteEmployeeOrAccountantErrors = {
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
};

export type PostV2MembershipsInviteEmployeeOrAccountantError = PostV2MembershipsInviteEmployeeOrAccountantErrors[keyof PostV2MembershipsInviteEmployeeOrAccountantErrors];

export type PostV2MembershipsInviteEmployeeOrAccountantResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostV2MembershipsInviteEmployeeOrAccountantResponse = PostV2MembershipsInviteEmployeeOrAccountantResponses[keyof PostV2MembershipsInviteEmployeeOrAccountantResponses];

export type GetV2OrganizationData = {
    body?: never;
    headers?: {
        /**
         * Required only for Sandbox API requests; to get one, please submit the following form: https://getqonto.atlassian.net/servicedesk/customer/portal/5/group/47/create/143.
         */
        'X-Qonto-Staging-Token'?: string;
        Accept?: string;
    };
    path?: never;
    query?: {
        /**
         * By default includes only Qonto accounts. Set to 'true' if you also want to include your [connected externals account(s)](https://help.qonto.com/en/articles/9203596-how-to-connect-my-external-accounts-to-my-qonto-interface).
         */
        include_external_accounts?: boolean;
    };
    url: '/v2/organization';
};

export type GetV2OrganizationErrors = {
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
};

export type GetV2OrganizationError = GetV2OrganizationErrors[keyof GetV2OrganizationErrors];

export type GetV2OrganizationResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2OrganizationResponse = GetV2OrganizationResponses[keyof GetV2OrganizationResponses];

export type DeleteV2TransactionsByIdAttachmentsData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path: {
        /**
         * (Required)
         */
        id: string;
    };
    query?: never;
    url: '/v2/transactions/{id}/attachments';
};

export type DeleteV2TransactionsByIdAttachmentsErrors = {
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
    /**
     * Not Found
     */
    404: {
        [key: string]: unknown;
    };
};

export type DeleteV2TransactionsByIdAttachmentsError = DeleteV2TransactionsByIdAttachmentsErrors[keyof DeleteV2TransactionsByIdAttachmentsErrors];

export type DeleteV2TransactionsByIdAttachmentsResponses = {
    /**
     * OK
     */
    200: string;
};

export type DeleteV2TransactionsByIdAttachmentsResponse = DeleteV2TransactionsByIdAttachmentsResponses[keyof DeleteV2TransactionsByIdAttachmentsResponses];

export type GetV2TransactionsByIdAttachmentsData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path: {
        /**
         * (Required)
         */
        id: string;
    };
    query?: never;
    url: '/v2/transactions/{id}/attachments';
};

export type GetV2TransactionsByIdAttachmentsErrors = {
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Not Found
     */
    404: {
        [key: string]: unknown;
    };
};

export type GetV2TransactionsByIdAttachmentsError = GetV2TransactionsByIdAttachmentsErrors[keyof GetV2TransactionsByIdAttachmentsErrors];

export type GetV2TransactionsByIdAttachmentsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2TransactionsByIdAttachmentsResponse = GetV2TransactionsByIdAttachmentsResponses[keyof GetV2TransactionsByIdAttachmentsResponses];

export type PostV2TransactionsByIdAttachmentsData = {
    body?: {
        file?: string;
    };
    headers?: {
        /**
         * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice.
         */
        'X-Qonto-Idempotency-Key'?: string;
        'Content-Type'?: string;
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path: {
        /**
         * (Required)
         */
        id: string;
    };
    query?: never;
    url: '/v2/transactions/{id}/attachments';
};

export type PostV2TransactionsByIdAttachmentsErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
    /**
     * Not Found
     */
    404: {
        [key: string]: unknown;
    };
};

export type PostV2TransactionsByIdAttachmentsError = PostV2TransactionsByIdAttachmentsErrors[keyof PostV2TransactionsByIdAttachmentsErrors];

export type PostV2TransactionsByIdAttachmentsResponses = {
    /**
     * OK
     */
    200: string;
};

export type PostV2TransactionsByIdAttachmentsResponse = PostV2TransactionsByIdAttachmentsResponses[keyof PostV2TransactionsByIdAttachmentsResponses];

export type DeleteV2TransactionsByIdAttachmentsByIdData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path: {
        /**
         * (Required)
         */
        id: string;
    };
    query?: never;
    url: '/v2/transactions/{id}/attachments/{id}';
};

export type DeleteV2TransactionsByIdAttachmentsByIdErrors = {
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
    /**
     * Not Found
     */
    404: {
        [key: string]: unknown;
    };
};

export type DeleteV2TransactionsByIdAttachmentsByIdError = DeleteV2TransactionsByIdAttachmentsByIdErrors[keyof DeleteV2TransactionsByIdAttachmentsByIdErrors];

export type DeleteV2TransactionsByIdAttachmentsByIdResponses = {
    /**
     * OK
     */
    200: string;
};

export type DeleteV2TransactionsByIdAttachmentsByIdResponse = DeleteV2TransactionsByIdAttachmentsByIdResponses[keyof DeleteV2TransactionsByIdAttachmentsByIdResponses];

export type GetV2TransactionsData = {
    body?: never;
    headers?: {
        /**
         * Required only for Sandbox API requests; to get one, please submit the following form: https://getqonto.atlassian.net/servicedesk/customer/portal/5/group/47/create/143.
         */
        'X-Qonto-Staging-Token'?: string;
        Accept?: string;
    };
    path?: never;
    query?: {
        /**
         * The `id` of the bank account for which transactions will be retrieved. Use [/v2/organization](openapi_v2.yml/paths/~1v2~1organization/get) to get this parameter. If both `bank_account_id` and `iban` are specified, `bank_account_id` takes precedence.
         */
        bank_account_id?: string;
    };
    url: '/v2/transactions';
};

export type GetV2TransactionsErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Not Found
     */
    404: string;
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
};

export type GetV2TransactionsError = GetV2TransactionsErrors[keyof GetV2TransactionsErrors];

export type GetV2TransactionsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2TransactionsResponse = GetV2TransactionsResponses[keyof GetV2TransactionsResponses];

export type GetV2TransactionsByIdData = {
    body?: never;
    headers?: {
        /**
         * Required only for Sandbox API requests; to get one, please submit the following form: https://getqonto.atlassian.net/servicedesk/customer/portal/5/group/47/create/143.
         */
        'X-Qonto-Staging-Token'?: string;
        Accept?: string;
    };
    path: {
        /**
         * (Required) UUID of the transaction to retrieve.
         */
        id: string;
    };
    query?: never;
    url: '/v2/transactions/{id}';
};

export type GetV2TransactionsByIdErrors = {
    /**
     * Not Found
     */
    404: string;
};

export type GetV2TransactionsByIdError = GetV2TransactionsByIdErrors[keyof GetV2TransactionsByIdErrors];

export type GetV2TransactionsByIdResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2TransactionsByIdResponse = GetV2TransactionsByIdResponses[keyof GetV2TransactionsByIdResponses];

export type PostV2InternalTransfersData = {
    body?: {
        [key: string]: unknown;
    };
    headers?: {
        /**
         * (Required) The API supports idempotency for safely retrying requests without accidentally performing the same operation twice.
         */
        'X-Qonto-Idempotency-Key'?: string;
        'Content-Type'?: string;
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/internal_transfers';
};

export type PostV2InternalTransfersErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
};

export type PostV2InternalTransfersError = PostV2InternalTransfersErrors[keyof PostV2InternalTransfersErrors];

export type PostV2InternalTransfersResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostV2InternalTransfersResponse = PostV2InternalTransfersResponses[keyof PostV2InternalTransfersResponses];

export type GetV2RequestsData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: {
        status?: string;
        request_type?: string;
        created_at_from?: string;
        processed_at_from?: string;
        sort_by?: string;
    };
    url: '/v2/requests';
};

export type GetV2RequestsErrors = {
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
};

export type GetV2RequestsError = GetV2RequestsErrors[keyof GetV2RequestsErrors];

export type GetV2RequestsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2RequestsResponse = GetV2RequestsResponses[keyof GetV2RequestsResponses];

export type PostV2RequestsMultiTransfersData = {
    body?: {
        [key: string]: unknown;
    };
    headers?: {
        /**
         * (Required) The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. The idempotency key must be a unique string. We recommend using a UUID.
         */
        'X-Qonto-Idempotency-Key'?: string;
        'Content-Type'?: string;
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/requests/multi_transfers';
};

export type PostV2RequestsMultiTransfersErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden
     */
    403: string;
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
};

export type PostV2RequestsMultiTransfersError = PostV2RequestsMultiTransfersErrors[keyof PostV2RequestsMultiTransfersErrors];

export type PostV2RequestsMultiTransfersResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostV2RequestsMultiTransfersResponse = PostV2RequestsMultiTransfersResponses[keyof PostV2RequestsMultiTransfersResponses];

export type PostV2RequestsByRequestTypeByIdApproveData = {
    body?: {
        [key: string]: unknown;
    };
    headers?: {
        /**
         * (Required) The API supports idempotency for safely retrying requests without accidentally performing the same operation twice.
         */
        'X-Qonto-Idempotency-Key'?: string;
        'Content-Type'?: string;
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path: {
        /**
         * (Required) Type of a request to be approved.
         */
        request_type: string;
        /**
         * (Required) UUID of the request to be processed.
         */
        id: string;
    };
    query?: never;
    url: '/v2/requests/{request_type}/{id}/approve';
};

export type PostV2RequestsByRequestTypeByIdApproveErrors = {
    /**
     * Bad Request
     */
    400: string;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden
     */
    403: string;
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
    /**
     * Precondition Required
     */
    428: {
        [key: string]: unknown;
    };
};

export type PostV2RequestsByRequestTypeByIdApproveError = PostV2RequestsByRequestTypeByIdApproveErrors[keyof PostV2RequestsByRequestTypeByIdApproveErrors];

export type PostV2RequestsByRequestTypeByIdApproveResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostV2RequestsByRequestTypeByIdApproveResponse = PostV2RequestsByRequestTypeByIdApproveResponses[keyof PostV2RequestsByRequestTypeByIdApproveResponses];

export type PostV2RequestsByRequestTypeByIdDeclineData = {
    body?: {
        [key: string]: unknown;
    };
    headers?: {
        /**
         * (Required) The API supports idempotency for safely retrying requests without accidentally performing the same operation twice.
         */
        'X-Qonto-Idempotency-Key'?: string;
        'Content-Type'?: string;
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path: {
        /**
         * (Required) Type of a request to be declined.
         */
        request_type: string;
        /**
         * (Required) UUID of the request to be processed.
         */
        id: string;
    };
    query?: never;
    url: '/v2/requests/{request_type}/{id}/decline';
};

export type PostV2RequestsByRequestTypeByIdDeclineErrors = {
    /**
     * Bad Request
     */
    400: string;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden
     */
    403: string;
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
};

export type PostV2RequestsByRequestTypeByIdDeclineError = PostV2RequestsByRequestTypeByIdDeclineErrors[keyof PostV2RequestsByRequestTypeByIdDeclineErrors];

export type PostV2RequestsByRequestTypeByIdDeclineResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostV2RequestsByRequestTypeByIdDeclineResponse = PostV2RequestsByRequestTypeByIdDeclineResponses[keyof PostV2RequestsByRequestTypeByIdDeclineResponses];

export type GetV2SupplierInvoicesData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: {
        /**
         * status to filter on
         */
        'filter[status]'?: string;
        page?: string;
        per_page?: string;
        sort_by?: string;
    };
    url: '/v2/supplier_invoices';
};

export type GetV2SupplierInvoicesErrors = {
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
};

export type GetV2SupplierInvoicesError = GetV2SupplierInvoicesErrors[keyof GetV2SupplierInvoicesErrors];

export type GetV2SupplierInvoicesResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2SupplierInvoicesResponse = GetV2SupplierInvoicesResponses[keyof GetV2SupplierInvoicesResponses];

export type PostV2SupplierInvoicesBulkData = {
    body?: {
        /**
         * (Required)
         */
        supplier_invoices?: string;
    };
    headers?: {
        'Content-Type'?: string;
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/supplier_invoices/bulk';
};

export type PostV2SupplierInvoicesBulkErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
};

export type PostV2SupplierInvoicesBulkError = PostV2SupplierInvoicesBulkErrors[keyof PostV2SupplierInvoicesBulkErrors];

export type PostV2SupplierInvoicesBulkResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostV2SupplierInvoicesBulkResponse = PostV2SupplierInvoicesBulkResponses[keyof PostV2SupplierInvoicesBulkResponses];

export type GetV2ClientInvoicesData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: {
        'filter[status]'?: string;
        'filter[created_at_from]'?: string;
        'filter[created_at_to]'?: string;
        page?: string;
        per_page?: string;
        sort_by?: string;
    };
    url: '/v2/client_invoices';
};

export type GetV2ClientInvoicesErrors = {
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type GetV2ClientInvoicesError = GetV2ClientInvoicesErrors[keyof GetV2ClientInvoicesErrors];

export type GetV2ClientInvoicesResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2ClientInvoicesResponse = GetV2ClientInvoicesResponses[keyof GetV2ClientInvoicesResponses];

export type PostV2ClientInvoicesData = {
    body?: {
        [key: string]: unknown;
    };
    headers?: {
        'Content-Type'?: string;
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/client_invoices';
};

export type PostV2ClientInvoicesErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type PostV2ClientInvoicesError = PostV2ClientInvoicesErrors[keyof PostV2ClientInvoicesErrors];

export type PostV2ClientInvoicesResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostV2ClientInvoicesResponse = PostV2ClientInvoicesResponses[keyof PostV2ClientInvoicesResponses];

export type GetV2ClientInvoicesByIdData = {
    body?: never;
    headers?: {
        Accept?: string;
        /**
         * Required only for Sandbox API requests; to get one, please submit the following form: https://getqonto.atlassian.net/servicedesk/customer/portal/5/group/47/create/143.
         */
        'X-Qonto-Staging-Token'?: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/v2/client_invoices/{id}';
};

export type GetV2ClientInvoicesByIdErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
};

export type GetV2ClientInvoicesByIdError = GetV2ClientInvoicesByIdErrors[keyof GetV2ClientInvoicesByIdErrors];

export type GetV2ClientInvoicesByIdResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2ClientInvoicesByIdResponse = GetV2ClientInvoicesByIdResponses[keyof GetV2ClientInvoicesByIdResponses];

export type GetV2CreditNotesData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: {
        'filter[created_at_from]'?: string;
        'filter[created_at_to]'?: string;
        page?: string;
        per_page?: string;
        sort_by?: string;
    };
    url: '/v2/credit_notes';
};

export type GetV2CreditNotesErrors = {
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type GetV2CreditNotesError = GetV2CreditNotesErrors[keyof GetV2CreditNotesErrors];

export type GetV2CreditNotesResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2CreditNotesResponse = GetV2CreditNotesResponses[keyof GetV2CreditNotesResponses];

export type GetV2CreditNotesByIdData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path: {
        /**
         * (Required) ID of the credit note
         */
        id: string;
    };
    query?: never;
    url: '/v2/credit_notes/{id}';
};

export type GetV2CreditNotesByIdErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Not Found
     */
    404: {
        [key: string]: unknown;
    };
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type GetV2CreditNotesByIdError = GetV2CreditNotesByIdErrors[keyof GetV2CreditNotesByIdErrors];

export type GetV2CreditNotesByIdResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2CreditNotesByIdResponse = GetV2CreditNotesByIdResponses[keyof GetV2CreditNotesByIdResponses];

export type GetV2ClientsByIdData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/v2/clients/{id}';
};

export type GetV2ClientsByIdErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
    /**
     * Not Found
     */
    404: {
        [key: string]: unknown;
    };
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type GetV2ClientsByIdError = GetV2ClientsByIdErrors[keyof GetV2ClientsByIdErrors];

export type GetV2ClientsByIdResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2ClientsByIdResponse = GetV2ClientsByIdResponses[keyof GetV2ClientsByIdResponses];

export type GetV2ClientsData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: {
        /**
         * Attributes to filter by.
         *
         */
        filter?: string;
        page?: string;
        per_page?: string;
        sort_by?: string;
    };
    url: '/v2/clients';
};

export type GetV2ClientsErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
    /**
     * Not Found
     */
    404: {
        [key: string]: unknown;
    };
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type GetV2ClientsError = GetV2ClientsErrors[keyof GetV2ClientsErrors];

export type GetV2ClientsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2ClientsResponse = GetV2ClientsResponses[keyof GetV2ClientsResponses];

export type PostV2ClientsData = {
    body?: {
        [key: string]: unknown;
    };
    headers?: {
        'Content-Type'?: string;
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/clients';
};

export type PostV2ClientsErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: unknown;
    };
};

export type PostV2ClientsError = PostV2ClientsErrors[keyof PostV2ClientsErrors];

export type PostV2ClientsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostV2ClientsResponse = PostV2ClientsResponses[keyof PostV2ClientsResponses];

export type GetV2TeamsData = {
    body?: never;
    headers?: {
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: {
        page?: string;
        per_page?: string;
    };
    url: '/v2/teams';
};

export type GetV2TeamsErrors = {
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
};

export type GetV2TeamsError = GetV2TeamsErrors[keyof GetV2TeamsErrors];

export type GetV2TeamsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2TeamsResponse = GetV2TeamsResponses[keyof GetV2TeamsResponses];

export type PostV2TeamsData = {
    body?: {
        [key: string]: unknown;
    };
    headers?: {
        'Content-Type'?: string;
        Accept?: string;
        'X-Qonto-Staging-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/v2/teams';
};

export type PostV2TeamsErrors = {
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: unknown;
    };
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
};

export type PostV2TeamsError = PostV2TeamsErrors[keyof PostV2TeamsErrors];

export type PostV2TeamsResponses = {
    /**
     * Created
     */
    201: {
        [key: string]: unknown;
    };
};

export type PostV2TeamsResponse = PostV2TeamsResponses[keyof PostV2TeamsResponses];

export type GetV2StatementsByIdData = {
    body?: never;
    headers?: {
        /**
         * Required only for Sandbox API requests; to get one, please submit the following form: https://getqonto.atlassian.net/servicedesk/customer/portal/5/group/47/create/143.
         */
        'X-Qonto-Staging-Token'?: string;
        Accept?: string;
    };
    path: {
        /**
         * (Required) Unique identifier of the statement.
         */
        id: string;
    };
    query?: never;
    url: '/v2/statements/{id}';
};

export type GetV2StatementsByIdErrors = {
    /**
     * Not Found
     */
    404: {
        [key: string]: unknown;
    };
};

export type GetV2StatementsByIdError = GetV2StatementsByIdErrors[keyof GetV2StatementsByIdErrors];

export type GetV2StatementsByIdResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2StatementsByIdResponse = GetV2StatementsByIdResponses[keyof GetV2StatementsByIdResponses];

export type GetV2StatementsData = {
    body?: never;
    headers?: {
        /**
         * Required only for Sandbox API requests; to get one, please submit the following form: https://getqonto.atlassian.net/servicedesk/customer/portal/5/group/47/create/143.
         */
        'X-Qonto-Staging-Token'?: string;
        Accept?: string;
    };
    path?: never;
    query?: {
        /**
         * Statements can be filtered by their `bank_account_id`.<br>⚠️ `ibans` and `bank_account_ids` are mutually exclusive and cannot be used together.
         */
        'bank_account_ids[]'?: string;
        /**
         * Statements can be filtered by their `iban`.<br>⚠️ `ibans` and `bank_account_ids` are mutually exclusive and cannot be used together.
         */
        'ibans[]'?: string;
        /**
         * Statements can be filtered by their `period`. This filter is the beginning of the desired statement period (included).
         */
        period_from?: string;
        /**
         * Statements can be filtered by their `period`. This filter is the end of the desired statement period (included).
         */
        period_to?: string;
        /**
         * cf. https://api-doc.qonto.com/docs/business-api/05ccf93502e54-pagination
         */
        page?: number;
        /**
         * cf. https://api-doc.qonto.com/docs/business-api/05ccf93502e54-pagination
         */
        per_page?: number;
        /**
         * Statements can be sorted by their `period` in 2 possible directions: `asc` (Ascending) / `desc` (Descending).
         */
        sort_by?: string;
    };
    url: '/v2/statements';
};

export type GetV2StatementsErrors = {
    /**
     * Unprocessable Entity (WebDAV) (RFC 4918)
     */
    422: {
        [key: string]: unknown;
    };
};

export type GetV2StatementsError = GetV2StatementsErrors[keyof GetV2StatementsErrors];

export type GetV2StatementsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetV2StatementsResponse = GetV2StatementsResponses[keyof GetV2StatementsResponses];

export type ClientOptions = {
    baseUrl: 'http://{{auth_url}}' | 'http://{{oauth_url}}' | 'http://{{thirdparty_url}}' | (string & {});
};