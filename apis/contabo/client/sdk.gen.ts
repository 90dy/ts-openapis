// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { StartData, StartResponse, RestartData, RestartResponse, StopData, StopResponse, ShutdownData, ShutdownResponse, RescueData, RescueResponse, ResetPasswordActionData, ResetPasswordActionResponse, RetrieveInstancesListData, RetrieveInstancesListResponse, CreateInstanceData, CreateInstanceResponse2, RetrieveInstanceData, RetrieveInstanceResponse, PatchInstanceData, PatchInstanceResponse2, ReinstallInstanceData, ReinstallInstanceResponse2, CancelInstanceData, CancelInstanceResponse2, UpgradeInstanceData, UpgradeInstanceResponse, RetrieveInstancesActionsAuditsListData, RetrieveInstancesActionsAuditsListResponse, RetrieveInstancesAuditsListData, RetrieveInstancesAuditsListResponse, RetrieveImageListData, RetrieveImageListResponse, CreateCustomImageData, CreateCustomImageResponse2, CreateCustomImageError, DeleteImageData, DeleteImageResponse, RetrieveImageData, RetrieveImageResponse, UpdateImageData, UpdateImageResponse, RetrieveCustomImagesStatsData, RetrieveCustomImagesStatsResponse, RetrieveSnapshotListData, RetrieveSnapshotListResponse, CreateSnapshotData, CreateSnapshotResponse2, DeleteSnapshotData, DeleteSnapshotResponse, RetrieveSnapshotData, RetrieveSnapshotResponse, UpdateSnapshotData, UpdateSnapshotResponse2, RollbackSnapshotData, RollbackSnapshotResponse2, RetrieveImageAuditsListData, RetrieveImageAuditsListResponse, RetrieveSnapshotsAuditsListData, RetrieveSnapshotsAuditsListResponse, RetrieveObjectStorageListData, RetrieveObjectStorageListResponse, CreateObjectStorageData, CreateObjectStorageResponse2, RetrieveDataCenterListData, RetrieveDataCenterListResponse, RetrieveObjectStorageData, RetrieveObjectStorageResponse, UpdateObjectStorageData, UpdateObjectStorageResponse, UpgradeObjectStorageData, UpgradeObjectStorageResponse2, RetrieveObjectStoragesStatsData, RetrieveObjectStoragesStatsResponse, CancelObjectStorageData, CancelObjectStorageResponse2, CreateTicketData, CreateTicketResponse2, RetrieveObjectStorageAuditsListData, RetrieveObjectStorageAuditsListResponse, RetrievePrivateNetworkListData, RetrievePrivateNetworkListResponse, CreatePrivateNetworkData, CreatePrivateNetworkResponse2, DeletePrivateNetworkData, DeletePrivateNetworkResponse, RetrievePrivateNetworkData, RetrievePrivateNetworkResponse, PatchPrivateNetworkData, PatchPrivateNetworkResponse2, UnassignInstancePrivateNetworkData, UnassignInstancePrivateNetworkResponse2, AssignInstancePrivateNetworkData, AssignInstancePrivateNetworkResponse2, RetrievePrivateNetworkAuditsListData, RetrievePrivateNetworkAuditsListResponse, RetrieveSecretListData, RetrieveSecretListResponse, CreateSecretData, CreateSecretResponse2, DeleteSecretData, DeleteSecretResponse, RetrieveSecretData, RetrieveSecretResponse, UpdateSecretData, UpdateSecretResponse2, RetrieveSecretAuditsListData, RetrieveSecretAuditsListResponse, RetrieveVipListData, RetrieveVipListResponse, RetrieveVipData, RetrieveVipResponse, UnassignIpData, UnassignIpResponse, AssignIpData, AssignIpResponse, RetrieveVipAuditsListData, RetrieveVipAuditsListResponse, RetrieveTagListData, RetrieveTagListResponse, CreateTagData, CreateTagResponse2, DeleteTagData, DeleteTagResponse, RetrieveTagData, RetrieveTagResponse, UpdateTagData, UpdateTagResponse2, RetrieveAssignmentListData, RetrieveAssignmentListResponse, DeleteAssignmentData, DeleteAssignmentResponse, RetrieveAssignmentData, RetrieveAssignmentResponse, CreateAssignmentData, CreateAssignmentResponse2, RetrieveTagAuditsListData, RetrieveTagAuditsListResponse, RetrieveAssignmentsAuditsListData, RetrieveAssignmentsAuditsListResponse, RetrieveUserListData, RetrieveUserListResponse, CreateUserData, CreateUserResponse2, DeleteUserData, DeleteUserResponse, RetrieveUserData, RetrieveUserResponse, UpdateUserData, UpdateUserResponse2, ResetPasswordData, ResetPasswordResponse, ResendEmailVerificationData, ResendEmailVerificationResponse, RetrieveUserClientData, RetrieveUserClientResponse, GenerateClientSecretData, GenerateClientSecretResponse2, RetrieveUserIsPasswordSetData, RetrieveUserIsPasswordSetResponse, RetrieveRoleListData, RetrieveRoleListResponse, CreateRoleData, CreateRoleResponse2, DeleteRoleData, DeleteRoleResponse, RetrieveRoleData, RetrieveRoleResponse, UpdateRoleData, UpdateRoleResponse2, RetrieveApiPermissionsListData, RetrieveApiPermissionsListResponse, ListObjectStorageCredentialsData, ListObjectStorageCredentialsResponse, GetObjectStorageCredentialsData, GetObjectStorageCredentialsResponse, RegenerateObjectStorageCredentialsData, RegenerateObjectStorageCredentialsResponse, RetrieveUserAuditsListData, RetrieveUserAuditsListResponse, RetrieveRoleAuditsListData, RetrieveRoleAuditsListResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Start a compute instance / resource identified by its id
 * Starting a compute instance / resource is like powering on a real server. If the compute instance / resource is already started nothing will happen. You may check the current status anytime when getting information about a compute instance / resource.
 */
export const start = <ThrowOnError extends boolean = false>(options: Options<StartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StartResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}/actions/start',
        ...options
    });
};

/**
 * Restart a compute instance / resource identified by its id.
 * To restart a compute instance that has been identified by its id, you should perform a restart action on it.
 */
export const restart = <ThrowOnError extends boolean = false>(options: Options<RestartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RestartResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}/actions/restart',
        ...options
    });
};

/**
 * Stop compute instance / resource by its id
 * Stopping a compute instance / resource is like powering off a real server. So please be aware that data may be lost. Alternatively you may log in and shut your compute instance / resource gracefully via the operating system. If the compute instance / resource is already stopped nothing will happen. You may check the current status anytime when getting information about a compute instance / resource.
 */
export const stop = <ThrowOnError extends boolean = false>(options: Options<StopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StopResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}/actions/stop',
        ...options
    });
};

/**
 * Shutdown compute instance / resource by its id
 * Shutdown an compute instance / resource. This is similar to pressing the power button on a physical machine. This will send an ACPI event for the guest OS, which should then proceed to a clean shutdown.
 */
export const shutdown = <ThrowOnError extends boolean = false>(options: Options<ShutdownData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ShutdownResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}/actions/shutdown',
        ...options
    });
};

/**
 * Rescue a compute instance / resource identified by its id
 * You can reboot your instance in rescue mode to resolve system issues. Rescue system is Linux based and its booted instead of your regular operating system. The disk containing your operating sytstem, software and your data is already mounted for you to access and repair/modify files. After a reboot your compute instance will boot your operating system. Please note that this is for advanced users.
 */
export const rescue = <ThrowOnError extends boolean = false>(options: Options<RescueData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RescueResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}/actions/rescue',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reset password for a compute instance / resource referenced by an id
 * Reset password for a compute instance / resource referenced by an id. This will reset the current password to the password that you provided in the body of this request.
 */
export const resetPasswordAction = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordActionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetPasswordActionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}/actions/resetPassword',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List instances
 * List and filter all instances in your account
 */
export const retrieveInstancesList = <ThrowOnError extends boolean = false>(options: Options<RetrieveInstancesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveInstancesListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances',
        ...options
    });
};

/**
 * Create a new instance
 * Create a new instance for your account with the provided parameters.         <table>           <tr><th>ProductId</th><th>Product</th><th>Disk Size</th></tr>           <tr><td>V68</td><td>VPS 4C NVMe</td><td>100 GB NVMe</td></tr>           <tr><td>V76</td><td>VPS 4C SSD</td><td>200 GB SSD</td></tr>          <tr><td>V85</td><td>VPS 4C Storage</td><td>600 GB NVMe</td></tr>           <tr><td>V69</td><td>VPS 6C NVMe</td><td>150 GB NVMe</td></tr>           <tr><td>V77</td><td>VPS 6C SSD</td><td>300 GB SSD</td></tr>          <tr><td>V86</td><td>VPS 6C Storage</td><td>1800 GB NVMe</td></tr>           <tr><td>V70</td><td>VPS 8C NVMe</td><td>200 GB NVMe</td></tr>           <tr><td>V78</td><td>VPS 8C SSD</td><td>400 GB SSD</td></tr>          <tr><td>V87</td><td>VPS 8C Storage</td><td>2400 GB NVMe</td></tr>           <tr><td>V71</td><td>VPS 10C NVMe</td><td>250 GB NVMe</td></tr>           <tr><td>V79</td><td>VPS 10C SSD</td><td>500 GB SSD</td></tr>           <tr><td>V88</td><td>VPS 10C Storage</td><td>3200 GB NVMe</td></tr>           <tr><td>V72</td><td>VPS 14C NVMe</td><td>300 GB NVMe</td></tr>           <tr><td>V80</td><td>VPS 14C SSD</td><td>600 GB SSD</td></tr>           <tr><td>V89</td><td>VPS 16C Storage</td><td>3600 GB SSD</td></tr>           <tr><td>V73</td><td>VPS 20C NVMe</td><td>400 GB NVMe</td></tr>           <tr><td>V81</td><td>VPS 20C SSD</td><td>800 GB SSD</td></tr>           <tr><td>V74</td><td>VPS 24C NVMe</td><td>600 GB NVMe</td></tr>           <tr><td>V83</td><td>VPS 24C SSD</td><td>1200 GB SSD</td></tr>           <tr><td>V8</td><td>VDS S</td><td>180 GB NVMe</td></tr>           <tr><td>V9</td><td>VDS M</td><td>240 GB NVMe</td></tr>           <tr><td>V10</td><td>VDS L</td><td>360 GB NVMe</td></tr>           <tr><td>V11</td><td>VDS XL</td><td>480 GB NVMe</td></tr>           <tr><td>V16</td><td>VDS XXL</td><td>720 GB NVMe</td></tr>           </table>
 */
export const createInstance = <ThrowOnError extends boolean = false>(options: Options<CreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateInstanceResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get specific instance by id
 * Get attributes values to a specific instance on your account.
 */
export const retrieveInstance = <ThrowOnError extends boolean = false>(options: Options<RetrieveInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveInstanceResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}',
        ...options
    });
};

/**
 * Update specific instance
 * Update specific instance by instanceId.
 */
export const patchInstance = <ThrowOnError extends boolean = false>(options: Options<PatchInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchInstanceResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reinstall specific instance
 * You can reinstall a specific instance with a new image and optionally add ssh keys, a root password or cloud-init.
 */
export const reinstallInstance = <ThrowOnError extends boolean = false>(options: Options<ReinstallInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ReinstallInstanceResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cancel specific instance by id
 * Your are free to cancel a previously created instance at any time.
 */
export const cancelInstance = <ThrowOnError extends boolean = false>(options: Options<CancelInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CancelInstanceResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}/cancel',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upgrading instance capabilities
 * In order to enhance your instance with additional features you can purchase add-ons.   Currently only firewalling and private network addon is allowed.
 */
export const upgradeInstance = <ThrowOnError extends boolean = false>(options: Options<UpgradeInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpgradeInstanceResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}/upgrade',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List history about your actions (audit) triggered via the API
 * List and filters the history about your actions your triggered via the API.
 */
export const retrieveInstancesActionsAuditsList = <ThrowOnError extends boolean = false>(options: Options<RetrieveInstancesActionsAuditsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveInstancesActionsAuditsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/actions/audits',
        ...options
    });
};

/**
 * List history about your instances (audit)
 * List and filters the history about your instances.
 */
export const retrieveInstancesAuditsList = <ThrowOnError extends boolean = false>(options: Options<RetrieveInstancesAuditsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveInstancesAuditsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/audits',
        ...options
    });
};

/**
 * List available standard and custom images
 * List and filter all available standard images provided by [Contabo](https://contabo.com) and your uploaded custom images.
 */
export const retrieveImageList = <ThrowOnError extends boolean = false>(options: Options<RetrieveImageListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveImageListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/images',
        ...options
    });
};

/**
 * Provide a custom image
 * In order to provide a custom image please specify an URL from where the image can be directly downloaded. A custom image must be in either `.iso` or `.qcow2` format. Other formats will be rejected. Please note that downloading can take a while depending on network speed resp. bandwidth and size of image. You can check the status by retrieving information about the image via a GET request. Download will be rejected if you have exceeded your limits.
 */
export const createCustomImage = <ThrowOnError extends boolean = false>(options: Options<CreateCustomImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCustomImageResponse2, CreateCustomImageError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/images',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete an uploaded custom image by its id
 * Your are free to delete a previously uploaded custom images at any time
 */
export const deleteImage = <ThrowOnError extends boolean = false>(options: Options<DeleteImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteImageResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/images/{imageId}',
        ...options
    });
};

/**
 * Get details about a specific image by its id
 * Get details about a specific image. This could be either a standard or custom image. In case of an custom image you can also check the download status
 */
export const retrieveImage = <ThrowOnError extends boolean = false>(options: Options<RetrieveImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveImageResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/images/{imageId}',
        ...options
    });
};

/**
 * Update custom image name by its id
 * Update name of the custom image
 */
export const updateImage = <ThrowOnError extends boolean = false>(options: Options<UpdateImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateImageResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/images/{imageId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List statistics regarding the customer's custom images
 * List statistics regarding the customer's custom images such as the number of custom images uploaded, used disk space, free available disk space and total available disk space
 */
export const retrieveCustomImagesStats = <ThrowOnError extends boolean = false>(options: Options<RetrieveCustomImagesStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveCustomImagesStatsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/images/stats',
        ...options
    });
};

/**
 * List snapshots
 * List and filter all your snapshots for a specific instance
 */
export const retrieveSnapshotList = <ThrowOnError extends boolean = false>(options: Options<RetrieveSnapshotListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveSnapshotListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}/snapshots',
        ...options
    });
};

/**
 * Create a new instance snapshot
 * Create a new snapshot for instance, with name and description attributes
 */
export const createSnapshot = <ThrowOnError extends boolean = false>(options: Options<CreateSnapshotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSnapshotResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}/snapshots',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete existing snapshot by id
 * Delete existing instance snapshot by id
 */
export const deleteSnapshot = <ThrowOnError extends boolean = false>(options: Options<DeleteSnapshotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSnapshotResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}/snapshots/{snapshotId}',
        ...options
    });
};

/**
 * Retrieve a specific snapshot by id
 * Get all attributes for a specific snapshot
 */
export const retrieveSnapshot = <ThrowOnError extends boolean = false>(options: Options<RetrieveSnapshotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveSnapshotResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}/snapshots/{snapshotId}',
        ...options
    });
};

/**
 * Update specific snapshot by id
 * Update attributes of a snapshot. You may only specify the attributes you want to change. If an attribute is not set, it will retain its original value.
 */
export const updateSnapshot = <ThrowOnError extends boolean = false>(options: Options<UpdateSnapshotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSnapshotResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}/snapshots/{snapshotId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Revert the instance to a particular snapshot based on its identifier
 * Rollback the instance to a specific snapshot. In case the snapshot is not the latest one, it will automatically delete all the newer snapshots of the instance
 */
export const rollbackSnapshot = <ThrowOnError extends boolean = false>(options: Options<RollbackSnapshotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RollbackSnapshotResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/instances/{instanceId}/snapshots/{snapshotId}/rollback',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List history about your custom images (audit)
 * List and filters the history about your custom images.
 */
export const retrieveImageAuditsList = <ThrowOnError extends boolean = false>(options: Options<RetrieveImageAuditsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveImageAuditsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/images/audits',
        ...options
    });
};

/**
 * List history about your snapshots (audit) triggered via the API
 * List and filters the history about your snapshots your triggered via the API.
 */
export const retrieveSnapshotsAuditsList = <ThrowOnError extends boolean = false>(options: Options<RetrieveSnapshotsAuditsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveSnapshotsAuditsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/compute/snapshots/audits',
        ...options
    });
};

/**
 * List all your object storages
 * List and filter all object storages in your account
 */
export const retrieveObjectStorageList = <ThrowOnError extends boolean = false>(options: Options<RetrieveObjectStorageListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveObjectStorageListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/object-storages',
        ...options
    });
};

/**
 * Create a new object storage
 * Create / purchase a new object storage in your account. Please note that you can only buy one object storage per location. You can actually increase the object storage space via `POST` to `/v1/object-storages/{objectStorageId}/resize`
 */
export const createObjectStorage = <ThrowOnError extends boolean = false>(options: Options<CreateObjectStorageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateObjectStorageResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/object-storages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List data centers
 * List all data centers and their corresponding regions.
 */
export const retrieveDataCenterList = <ThrowOnError extends boolean = false>(options: Options<RetrieveDataCenterListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveDataCenterListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/data-centers',
        ...options
    });
};

/**
 * Get specific object storage by its id
 * Get data for a specific object storage on your account.
 */
export const retrieveObjectStorage = <ThrowOnError extends boolean = false>(options: Options<RetrieveObjectStorageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveObjectStorageResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/object-storages/{objectStorageId}',
        ...options
    });
};

/**
 * Modifies the display name of object storage
 * Modifies the display name of object storage. Display name must be unique.
 */
export const updateObjectStorage = <ThrowOnError extends boolean = false>(options: Options<UpdateObjectStorageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateObjectStorageResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/object-storages/{objectStorageId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upgrade object storage size resp. update autoscaling settings.
 * Upgrade object storage size. You can also adjust the autoscaling settings for your object storage. Autoscaling allows you to automatically purchase storage capacity on a monthly basis up to the specified limit.
 */
export const upgradeObjectStorage = <ThrowOnError extends boolean = false>(options: Options<UpgradeObjectStorageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpgradeObjectStorageResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/object-storages/{objectStorageId}/resize',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List usage statistics about the specified object storage
 * List usage statistics about the specified object storage such as the number of objects uploaded / created, used object storage space. Please note that the usage statistics are updated regularly and are not live usage statistics.
 */
export const retrieveObjectStoragesStats = <ThrowOnError extends boolean = false>(options: Options<RetrieveObjectStoragesStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveObjectStoragesStatsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/object-storages/{objectStorageId}/stats',
        ...options
    });
};

/**
 * Cancels the specified object storage at the next possible date
 * Cancels the specified object storage at the next possible date. Please be aware of your contract periods.
 */
export const cancelObjectStorage = <ThrowOnError extends boolean = false>(options: Options<CancelObjectStorageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CancelObjectStorageResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/object-storages/{objectStorageId}/cancel',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a new support ticket
 * Create a new support ticket.
 */
export const createTicket = <ThrowOnError extends boolean = false>(options: Options<CreateTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTicketResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/create-ticket',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List history about your object storages (audit)
 * List and filters the history about your object storages.
 */
export const retrieveObjectStorageAuditsList = <ThrowOnError extends boolean = false>(options: Options<RetrieveObjectStorageAuditsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveObjectStorageAuditsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/object-storages/audits',
        ...options
    });
};

/**
 * List Private Networks
 * List and filter all Private Networks in your account
 */
export const retrievePrivateNetworkList = <ThrowOnError extends boolean = false>(options: Options<RetrievePrivateNetworkListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrievePrivateNetworkListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/private-networks',
        ...options
    });
};

/**
 * Create a new Private Network
 * Create a new Private Network in your account.
 */
export const createPrivateNetwork = <ThrowOnError extends boolean = false>(options: Options<CreatePrivateNetworkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePrivateNetworkResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/private-networks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete existing Private Network by id
 * Delete existing Virtual Private Cloud by id and automatically unassign all instances from it
 */
export const deletePrivateNetwork = <ThrowOnError extends boolean = false>(options: Options<DeletePrivateNetworkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePrivateNetworkResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/private-networks/{privateNetworkId}',
        ...options
    });
};

/**
 * Get specific Private Network by id
 * Get attributes values to a specific Private Network on your account.
 */
export const retrievePrivateNetwork = <ThrowOnError extends boolean = false>(options: Options<RetrievePrivateNetworkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrievePrivateNetworkResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/private-networks/{privateNetworkId}',
        ...options
    });
};

/**
 * Update a Private Network by id
 * Update a Private Network by id in your account.
 */
export const patchPrivateNetwork = <ThrowOnError extends boolean = false>(options: Options<PatchPrivateNetworkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPrivateNetworkResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/private-networks/{privateNetworkId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove instance from a Private Network
 * Remove a specific instance from a Private Network
 */
export const unassignInstancePrivateNetwork = <ThrowOnError extends boolean = false>(options: Options<UnassignInstancePrivateNetworkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UnassignInstancePrivateNetworkResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/private-networks/{privateNetworkId}/instances/{instanceId}',
        ...options
    });
};

/**
 * Add instance to a Private Network
 * Add a specific instance to a Private Network
 */
export const assignInstancePrivateNetwork = <ThrowOnError extends boolean = false>(options: Options<AssignInstancePrivateNetworkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignInstancePrivateNetworkResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/private-networks/{privateNetworkId}/instances/{instanceId}',
        ...options
    });
};

/**
 * List history about your Private Networks (audit)
 * List and filters the history about your Private Networks.
 */
export const retrievePrivateNetworkAuditsList = <ThrowOnError extends boolean = false>(options: Options<RetrievePrivateNetworkAuditsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrievePrivateNetworkAuditsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/private-networks/audits',
        ...options
    });
};

/**
 * List secrets
 * List and filter all secrets in your account.
 */
export const retrieveSecretList = <ThrowOnError extends boolean = false>(options: Options<RetrieveSecretListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveSecretListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/secrets',
        ...options
    });
};

/**
 * Create a new secret
 * Create a new secret in your account with attributes name, type and value. Attribute type can be password or ssh.
 */
export const createSecret = <ThrowOnError extends boolean = false>(options: Options<CreateSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSecretResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/secrets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete existing secret by id
 * You can remove a specific secret from your account.
 */
export const deleteSecret = <ThrowOnError extends boolean = false>(options: Options<DeleteSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSecretResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/secrets/{secretId}',
        ...options
    });
};

/**
 * Get specific secret by id
 * Get attributes values for a specific secret on your account.
 */
export const retrieveSecret = <ThrowOnError extends boolean = false>(options: Options<RetrieveSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveSecretResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/secrets/{secretId}',
        ...options
    });
};

/**
 * Update specific secret by id
 * Update attributes to your secret. Attributes are optional. If not set, the attributes will retain their original values. Only name and value can be updated.
 */
export const updateSecret = <ThrowOnError extends boolean = false>(options: Options<UpdateSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSecretResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/secrets/{secretId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List history about your secrets (audit)
 * List and filters the history about your secrets.
 */
export const retrieveSecretAuditsList = <ThrowOnError extends boolean = false>(options: Options<RetrieveSecretAuditsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveSecretAuditsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/secrets/audits',
        ...options
    });
};

/**
 * List VIPs
 * List and filter all vips in your account
 */
export const retrieveVipList = <ThrowOnError extends boolean = false>(options: Options<RetrieveVipListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveVipListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/vips',
        ...options
    });
};

/**
 * Get specific VIP by ip
 * Get attributes values to a specific VIP on your account.
 */
export const retrieveVip = <ThrowOnError extends boolean = false>(options: Options<RetrieveVipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveVipResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/vips/{ip}',
        ...options
    });
};

/**
 * Unassign a VIP to a VPS/VDS/Bare Metal
 * Unassign a VIP from an VPS/VDS/Bare Metal using the machine id.
 */
export const unassignIp = <ThrowOnError extends boolean = false>(options: Options<UnassignIpData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UnassignIpResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/vips/{ip}/{resourceType}/{resourceId}',
        ...options
    });
};

/**
 * Assign a VIP to an VPS/VDS/Bare Metal
 * Assign a VIP to a VPS/VDS/Bare Metal using the machine id.
 */
export const assignIp = <ThrowOnError extends boolean = false>(options: Options<AssignIpData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignIpResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/vips/{ip}/{resourceType}/{resourceId}',
        ...options
    });
};

/**
 * List history about your VIPs (audit)
 * List and filters the history about your VIPs.
 */
export const retrieveVipAuditsList = <ThrowOnError extends boolean = false>(options: Options<RetrieveVipAuditsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveVipAuditsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/vips/audits',
        ...options
    });
};

/**
 * List tags
 * List and filter all tags in your account
 */
export const retrieveTagList = <ThrowOnError extends boolean = false>(options: Options<RetrieveTagListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveTagListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tags',
        ...options
    });
};

/**
 * Create a new tag
 * Create a new tag in your account with attribute name and optional attribute color.
 */
export const createTag = <ThrowOnError extends boolean = false>(options: Options<CreateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTagResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete existing tag by id
 * Your tag can be deleted if it is not assigned to any resource on your account. Check tag assigments before deleting tag.
 */
export const deleteTag = <ThrowOnError extends boolean = false>(options: Options<DeleteTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTagResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tags/{tagId}',
        ...options
    });
};

/**
 * Get specific tag by id
 * Get attributes values to a specific tag on your account.
 */
export const retrieveTag = <ThrowOnError extends boolean = false>(options: Options<RetrieveTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveTagResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tags/{tagId}',
        ...options
    });
};

/**
 * Update specific tag by id
 * Update attributes to your tag. Attributes are optional. If not set, the attributes will retain their original values.
 */
export const updateTag = <ThrowOnError extends boolean = false>(options: Options<UpdateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateTagResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tags/{tagId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List tag assignments
 * List and filter all existing assignments for a tag in your account
 */
export const retrieveAssignmentList = <ThrowOnError extends boolean = false>(options: Options<RetrieveAssignmentListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveAssignmentListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tags/{tagId}/assignments',
        ...options
    });
};

/**
 * Delete existing tag assignment
 * Tag assignment will be removed from the specified resource. If this tag is being used for access restrictions the affected users will no longer be able to access that resource.
 */
export const deleteAssignment = <ThrowOnError extends boolean = false>(options: Options<DeleteAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAssignmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tags/{tagId}/assignments/{resourceType}/{resourceId}',
        ...options
    });
};

/**
 * Get specific assignment for the tag
 * Get attributes for a specific tag assignment in your account. For this the resource type and resource id is required.
 */
export const retrieveAssignment = <ThrowOnError extends boolean = false>(options: Options<RetrieveAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveAssignmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tags/{tagId}/assignments/{resourceType}/{resourceId}',
        ...options
    });
};

/**
 * Create a new assignment for the tag
 * Create a new tag assignment. This marks the specified resource with the specified tag for organizing purposes or to restrict access to that resource.
 */
export const createAssignment = <ThrowOnError extends boolean = false>(options: Options<CreateAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAssignmentResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tags/{tagId}/assignments/{resourceType}/{resourceId}',
        ...options
    });
};

/**
 * List history about your assignments (audit)
 * List and filters the history about your assignments.
 */
export const retrieveTagAuditsList = <ThrowOnError extends boolean = false>(options: Options<RetrieveTagAuditsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveTagAuditsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tags/audits',
        ...options
    });
};

/**
 * List history about your assignments (audit)
 * List and filters the history about your assignments.
 */
export const retrieveAssignmentsAuditsList = <ThrowOnError extends boolean = false>(options: Options<RetrieveAssignmentsAuditsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveAssignmentsAuditsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tags/assignments/audits',
        ...options
    });
};

/**
 * List users
 * List and filter all your users.
 */
export const retrieveUserList = <ThrowOnError extends boolean = false>(options: Options<RetrieveUserListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveUserListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users',
        ...options
    });
};

/**
 * Create a new user
 * Create a new user with required attributes name, email, enabled, totp (=Two-factor authentication 2FA), admin (=access to all endpoints and resources), accessAllResources and roles. You can't specify any password / secrets for the user. For security reasons the user will have to specify secrets on his own.
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete existing user by id
 * By deleting a user he will not be able to access any endpoints or resources any longer. In order to temporarily disable a user please update its `enabled` attribute.
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{userId}',
        ...options
    });
};

/**
 * Get specific user by id
 * Get attributes for a specific user.
 */
export const retrieveUser = <ThrowOnError extends boolean = false>(options: Options<RetrieveUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{userId}',
        ...options
    });
};

/**
 * Update specific user by id
 * Update attributes of a user. You may only specify the attributes you want to change. If an attribute is not set, it will retain its original value.
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUserResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{userId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Send reset password email
 * Send reset password email for a specific user
 */
export const resetPassword = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetPasswordResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{userId}/reset-password',
        ...options
    });
};

/**
 * Resend email verification
 * Resend email verification for a specific user
 */
export const resendEmailVerification = <ThrowOnError extends boolean = false>(options: Options<ResendEmailVerificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResendEmailVerificationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{userId}/resend-email-verification',
        ...options
    });
};

/**
 * Get client
 * Get idm client.
 */
export const retrieveUserClient = <ThrowOnError extends boolean = false>(options: Options<RetrieveUserClientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveUserClientResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/client',
        ...options
    });
};

/**
 * Generate new client secret
 * Generate and get new client secret.
 */
export const generateClientSecret = <ThrowOnError extends boolean = false>(options: Options<GenerateClientSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<GenerateClientSecretResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/client/secret',
        ...options
    });
};

/**
 * Get user is password set status
 * Get info about idm user if the password is set.
 */
export const retrieveUserIsPasswordSet = <ThrowOnError extends boolean = false>(options: Options<RetrieveUserIsPasswordSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveUserIsPasswordSetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/is-password-set',
        ...options
    });
};

/**
 * List roles
 * List and filter all your roles. A role allows you to specify permission to api endpoints and resources like compute.
 */
export const retrieveRoleList = <ThrowOnError extends boolean = false>(options: Options<RetrieveRoleListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveRoleListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/roles',
        ...options
    });
};

/**
 * Create a new role
 * Create a new role. In order to get a list availbale api enpoints (apiName) and their actions please refer to the GET api-permissions endpoint. For specifying `resources` please enter tag ids. For those to take effect please assign them to a resource in the tag management api.
 */
export const createRole = <ThrowOnError extends boolean = false>(options: Options<CreateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRoleResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete existing role by id
 * You can't delete a role if it is still assigned to a user. In such cases please remove the role from the users.
 */
export const deleteRole = <ThrowOnError extends boolean = false>(options: Options<DeleteRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRoleResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/roles/{roleId}',
        ...options
    });
};

/**
 * Get specific role by id
 * Get attributes of specific role.
 */
export const retrieveRole = <ThrowOnError extends boolean = false>(options: Options<RetrieveRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveRoleResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/roles/{roleId}',
        ...options
    });
};

/**
 * Update specific role by id
 * Update attributes to your role. Attributes are optional. If not set, the attributes will retain their original values.
 */
export const updateRole = <ThrowOnError extends boolean = false>(options: Options<UpdateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateRoleResponse2, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/roles/{roleId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List of API permissions
 * List all available API permissions. This list serves as a reference for specifying roles. As endpoints differ in their possibilities not all actions are available for each endpoint.
 */
export const retrieveApiPermissionsList = <ThrowOnError extends boolean = false>(options: Options<RetrieveApiPermissionsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveApiPermissionsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/roles/api-permissions',
        ...options
    });
};

/**
 * Get list of S3 compatible object storage credentials for user.
 * Get list of S3 compatible object storage credentials for accessing it via S3 compatible tools like `aws` cli.
 */
export const listObjectStorageCredentials = <ThrowOnError extends boolean = false>(options: Options<ListObjectStorageCredentialsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListObjectStorageCredentialsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{userId}/object-storages/credentials',
        ...options
    });
};

/**
 * Get S3 compatible object storage credentials.
 * Get S3 compatible object storage credentials for accessing it via S3 compatible tools like `aws` cli.
 */
export const getObjectStorageCredentials = <ThrowOnError extends boolean = false>(options: Options<GetObjectStorageCredentialsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetObjectStorageCredentialsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{userId}/object-storages/{objectStorageId}/credentials/{credentialId}',
        ...options
    });
};

/**
 * Regenerates secret key of specified user for the S3 compatible object storages.
 * Regenerates secret key of specified user for the a specific S3 compatible object storages.
 */
export const regenerateObjectStorageCredentials = <ThrowOnError extends boolean = false>(options: Options<RegenerateObjectStorageCredentialsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RegenerateObjectStorageCredentialsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{userId}/object-storages/{objectStorageId}/credentials/{credentialId}',
        ...options
    });
};

/**
 * List history about your users (audit)
 * List and filter the history about your users.
 */
export const retrieveUserAuditsList = <ThrowOnError extends boolean = false>(options: Options<RetrieveUserAuditsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveUserAuditsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/audits',
        ...options
    });
};

/**
 * List history about your roles (audit)
 * List and filter the history about your roles.
 */
export const retrieveRoleAuditsList = <ThrowOnError extends boolean = false>(options: Options<RetrieveRoleAuditsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveRoleAuditsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/roles/audits',
        ...options
    });
};