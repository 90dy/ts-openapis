// This file is auto-generated by @hey-api/openapi-ts

export type InstanceStartActionResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Compute instance / resource id
     */
    instanceId: number;
    /**
     * Action that was triggered
     */
    action: string;
};

export type SelfLinks = {
    /**
     * Link to current resource.
     */
    self: string;
};

export type InstanceStartActionResponse = {
    data: Array<InstanceStartActionResponseData>;
    _links: SelfLinks;
};

export type InstanceRestartActionResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Compute instance / resource id
     */
    instanceId: number;
    /**
     * Action that was triggered
     */
    action: string;
};

export type InstanceRestartActionResponse = {
    data: Array<InstanceRestartActionResponseData>;
    _links: SelfLinks;
};

export type InstanceStopActionResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Compute instance / resource id
     */
    instanceId: number;
    /**
     * Action that was triggered
     */
    action: string;
};

export type InstanceStopActionResponse = {
    data: Array<InstanceStopActionResponseData>;
    _links: SelfLinks;
};

export type InstanceShutdownActionResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Compute instance / resource id
     */
    instanceId: number;
    /**
     * Action that was triggered
     */
    action: string;
};

export type InstanceShutdownActionResponse = {
    data: Array<InstanceShutdownActionResponseData>;
    _links: SelfLinks;
};

export type InstancesActionsRescueRequest = {
    /**
     * `secretId` of the password to login into rescue system for the `root` user.
     */
    rootPassword?: number;
    /**
     * Array of `secretId`s of public SSH keys for logging into rescue system as `root` user.
     */
    sshKeys?: Array<number>;
    /**
     * [Cloud-Init](https://cloud-init.io/) Config in order to customize during start of compute instance.
     */
    userData?: string;
};

export type InstanceRescueActionResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Compute instance / resource id
     */
    instanceId: number;
    /**
     * Action that was triggered
     */
    action: string;
};

export type InstanceRescueActionResponse = {
    data: Array<InstanceRescueActionResponseData>;
    _links: SelfLinks;
};

export type InstancesResetPasswordActionsRequest = {
    /**
     * Array of `secretId`s of public SSH keys for logging into as `defaultUser` with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management API.
     */
    sshKeys?: Array<number>;
    /**
     * `secretId` of the password for the `defaultUser` with administrator/root privileges. For Linux/BSD please use SSH, for Windows RDP. Please refer to Secrets Management API.
     */
    rootPassword?: number;
    /**
     * [Cloud-Init](https://cloud-init.io/) Config in order to customize during start of compute instance.
     */
    userData?: string;
};

export type InstanceResetPasswordActionResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Compute instance / resource id
     */
    instanceId: number;
    /**
     * Action that was triggered
     */
    action: string;
};

export type InstanceResetPasswordActionResponse = {
    data: Array<InstanceResetPasswordActionResponseData>;
    _links: SelfLinks;
};

export type PaginationMeta = {
    /**
     * Number of elements per page.
     */
    size: number;
    /**
     * Number of overall matched elements.
     */
    totalElements: number;
    /**
     * Overall number of pages.
     */
    totalPages: number;
    /**
     * Current number of page.
     */
    page: number;
};

export type IpV4 = {
    /**
     * IP Address
     */
    ip: string;
    /**
     * Netmask CIDR
     */
    netmaskCidr: number;
    /**
     * Gateway
     */
    gateway: string;
};

export type AdditionalIp = {
    v4: IpV4;
};

export type IpV6 = {
    /**
     * IP Address
     */
    ip: string;
    /**
     * Netmask CIDR
     */
    netmaskCidr: number;
    /**
     * Gateway
     */
    gateway: string;
};

export type IpConfig = {
    v4: IpV4;
    v6: IpV6;
};

/**
 * Instance's status
 */
export type InstanceStatus = 'provisioning' | 'uninstalled' | 'running' | 'stopped' | 'error' | 'installing' | 'unknown' | 'manual_provisioning' | 'product_not_available' | 'verification_required' | 'rescue' | 'pending_payment' | 'other' | 'reset_password';

export type AddOnResponse = {
    /**
     * Id of the Addon. Please refer to list [here](https://contabo.com/en/product-list/?show_ids=true).
     */
    id: number;
    /**
     * The number of Addons you wish to aquire.
     */
    quantity: number;
};

export type ListInstancesResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: 'DE' | 'INT';
    /**
     * Customer ID
     */
    customerId: string;
    additionalIps: Array<AdditionalIp>;
    /**
     * Instance Name
     */
    name: string;
    /**
     * Instance display name
     */
    displayName: string;
    /**
     * Instance ID
     */
    instanceId: number;
    /**
     * The data center where your Private Network is located
     */
    dataCenter: string;
    /**
     * Instance region where the compute instance should be located.
     */
    region: string;
    /**
     * The name of the region where the instance is located.
     */
    regionName: string;
    /**
     * Product ID
     */
    productId: string;
    /**
     * Image's id
     */
    imageId: string;
    ipConfig: IpConfig;
    /**
     * MAC Address
     */
    macAddress: string;
    /**
     * Image RAM size in MB
     */
    ramMb: number;
    /**
     * CPU core count
     */
    cpuCores: number;
    /**
     * Type of operating system (OS)
     */
    osType: string;
    /**
     * Image Disk size in MB
     */
    diskMb: number;
    /**
     * Array of `secretId`s of public SSH keys for logging into as `defaultUser` with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management API.
     */
    sshKeys: Array<number>;
    /**
     * The creation date for the instance
     */
    createdDate: string;
    /**
     * The date on which the instance will be cancelled
     */
    cancelDate: string;
    /**
     * Instance's status
     */
    status: InstanceStatus;
    /**
     * ID of host system
     */
    vHostId: number;
    /**
     * Number of host system
     */
    vHostNumber: number;
    /**
     * Name of host system
     */
    vHostName: string;
    addOns: Array<AddOnResponse>;
    /**
     * Message in case of an error.
     */
    errorMessage?: string;
    /**
     * Instance's category depending on Product Id
     */
    productType: 'hdd' | 'ssd' | 'vds' | 'nvme';
    /**
     * Instance's Product Name
     */
    productName: string;
    /**
     * Default user name created for login during (re-)installation with administrative privileges. Allowed values for Linux/BSD are `admin` (use sudo to apply administrative privileges like root) or `root`. Allowed values for Windows are `admin` (has administrative privileges like administrator) or `administrator`.
     */
    defaultUser?: 'root' | 'admin' | 'administrator';
};

export type Links = {
    /**
     * Link to current resource.
     */
    self: string;
    /**
     * Link to first page, if applicable.
     */
    first: string;
    /**
     * Link to previous page, if applicable.
     */
    previous?: string;
    /**
     * Link to next page, if applicable.
     */
    next?: string;
    /**
     * Link to last page, if applicable.
     */
    last: string;
};

export type ListInstancesResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<ListInstancesResponseData>;
    _links: Links;
};

export type InstanceResponse = {
    /**
     * Your customer tenant id
     */
    tenantId: 'DE' | 'INT';
    /**
     * Customer ID
     */
    customerId: string;
    additionalIps: Array<AdditionalIp>;
    /**
     * Instance Name
     */
    name: string;
    /**
     * Instance display name
     */
    displayName: string;
    /**
     * Instance ID
     */
    instanceId: number;
    /**
     * The data center where your Private Network is located
     */
    dataCenter: string;
    /**
     * Instance region where the compute instance should be located.
     */
    region: string;
    /**
     * The name of the region where the instance is located.
     */
    regionName: string;
    /**
     * Product ID
     */
    productId: string;
    /**
     * Image's id
     */
    imageId: string;
    ipConfig: IpConfig;
    /**
     * MAC Address
     */
    macAddress: string;
    /**
     * Image RAM size in MB
     */
    ramMb: number;
    /**
     * CPU core count
     */
    cpuCores: number;
    /**
     * Type of operating system (OS)
     */
    osType: string;
    /**
     * Image Disk size in MB
     */
    diskMb: number;
    /**
     * Array of `secretId`s of public SSH keys for logging into as `defaultUser` with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management API.
     */
    sshKeys: Array<number>;
    /**
     * The creation date for the instance
     */
    createdDate: string;
    /**
     * The date on which the instance will be cancelled
     */
    cancelDate: string;
    /**
     * Instance's status
     */
    status: InstanceStatus;
    /**
     * ID of host system
     */
    vHostId: number;
    /**
     * Number of host system
     */
    vHostNumber: number;
    /**
     * Name of host system
     */
    vHostName: string;
    addOns: Array<AddOnResponse>;
    /**
     * Message in case of an error.
     */
    errorMessage?: string;
    /**
     * Instance's category depending on Product Id
     */
    productType: 'hdd' | 'ssd' | 'vds' | 'nvme';
    /**
     * Instance's Product Name
     */
    productName: string;
    /**
     * Default user name created for login during (re-)installation with administrative privileges. Allowed values for Linux/BSD are `admin` (use sudo to apply administrative privileges like root) or `root`. Allowed values for Windows are `admin` (has administrative privileges like administrator) or `administrator`.
     */
    defaultUser?: 'root' | 'admin' | 'administrator';
};

export type FindInstanceResponse = {
    data: Array<InstanceResponse>;
    _links: SelfLinks;
};

export type PatchInstanceRequest = {
    /**
     * The display name of the instance
     */
    displayName?: string;
};

export type PatchInstanceResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Instance's id
     */
    instanceId: number;
    /**
     * Creation date of the instance
     */
    createdDate: string;
};

export type PatchInstanceResponse = {
    data: Array<PatchInstanceResponseData>;
    _links: SelfLinks;
};

export type ReinstallInstanceRequest = {
    /**
     * ImageId to be used to setup the compute instance.
     */
    imageId: string;
    /**
     * Array of `secretId`s of public SSH keys for logging into as `defaultUser` with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management API.
     */
    sshKeys?: Array<number>;
    /**
     * `secretId` of the password for the `defaultUser` with administrator/root privileges. For Linux/BSD please use SSH, for Windows RDP. Please refer to Secrets Management API.
     */
    rootPassword?: number;
    /**
     * [Cloud-Init](https://cloud-init.io/) Config in order to customize during start of compute instance.
     */
    userData?: string;
    /**
     * Default user name created for login during (re-)installation with administrative privileges. Allowed values for Linux/BSD are `admin` (use sudo to apply administrative privileges like root) or `root`. Allowed values for Windows are `admin` (has administrative privileges like administrator) or `administrator`.
     */
    defaultUser?: 'root' | 'admin' | 'administrator';
    /**
     * Application ID
     */
    applicationId?: string;
};

export type ReinstallInstanceResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Instance's id
     */
    instanceId: number;
    /**
     * Creation date for instance
     */
    createdDate: string;
};

export type ReinstallInstanceResponse = {
    data: Array<ReinstallInstanceResponseData>;
    _links: SelfLinks;
};

export type ExtraStorageRequest = {
    /**
     * Specify the size in TB and the quantity
     */
    ssd?: Array<string>;
    /**
     * Specify the size in TB and the quantity
     */
    nvme?: Array<string>;
};

export type AddOnRequest = {
    /**
     * Id of the Addon. Please refer to list [here](https://contabo.com/en/product-list/?show_ids=true).
     */
    id: number;
    /**
     * The number of Addons you wish to aquire.
     */
    quantity: number;
};

export type CreateInstanceAddons = {
    /**
     * Set this attribute if you want to upgrade your instance with the Private Networking addon.   Please provide an empty object for the time being as value. There will be more configuration possible   in the future.
     */
    privateNetworking?: {
        [key: string]: unknown;
    };
    /**
     * Set this attribute if you want to upgrade your instance with the Additional IPs addon. Please provide an empty object for the time being as value. There will be more configuration possible in the future.
     */
    additionalIps?: {
        [key: string]: unknown;
    };
    /**
     * Set this attribute if you want to upgrade your instance with the Automated backup addon.     Please provide an empty object for the time being as value. There will be more configuration possible     in the future.
     */
    backup?: {
        [key: string]: unknown;
    };
    /**
     * Set this attribute if you want to upgrade your instance with the Extra Storage addon.
     */
    extraStorage?: ExtraStorageRequest;
    /**
     * Set this attribute if you want to upgrade your instance with the Custom Images addon.   Please provide an empty object for the time being as value. There will be more configuration possible   in the future.
     */
    customImage?: {
        [key: string]: unknown;
    };
    addonsIds?: Array<AddOnRequest>;
};

export type CreateInstanceRequest = {
    /**
     * ImageId to be used to setup the compute instance. Default is Ubuntu 22.04
     */
    imageId?: string;
    /**
     * Default is V76
     */
    productId?: string;
    /**
     * Instance Region where the compute instance should be located. Default is EU
     */
    region?: 'EU' | 'US-central' | 'US-east' | 'US-west' | 'SIN' | 'UK' | 'AUS' | 'JPN' | 'IND';
    /**
     * Array of `secretId`s of public SSH keys for logging into as `defaultUser` with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management API.
     */
    sshKeys?: Array<number>;
    /**
     * `secretId` of the password for the `defaultUser` with administrator/root privileges. For Linux/BSD please use SSH, for Windows RDP. Please refer to Secrets Management API.
     */
    rootPassword?: number;
    /**
     * [Cloud-Init](https://cloud-init.io/) Config in order to customize during start of compute instance.
     */
    userData?: string;
    /**
     * Additional licence in order to enhance your chosen product, mainly needed for software licenses on your product (not needed for windows).
     */
    license?: 'cPanel5' | 'cPanel30' | 'cPanel50' | 'cPanel100' | 'cPanel150' | 'cPanel200' | 'cPanel250' | 'cPanel300' | 'cPanel350' | 'cPanel400' | 'cPanel450' | 'cPanel500' | 'cPanel550' | 'cPanel600' | 'cPanel650' | 'cPanel700' | 'cPanel750' | 'cPanel800' | 'cPanel850' | 'cPanel900' | 'cPanel950' | 'cPanel1000' | 'PleskAdmin' | 'PleskHost' | 'PleskPro';
    /**
     * Initial contract period in months. Available periods are: 1, 3, 6 and 12 months. Default to 1 month
     */
    period: number;
    /**
     * The display name of the instance
     */
    displayName?: string;
    /**
     * Default user name created for login during (re-)installation with administrative privileges. Allowed values for Linux/BSD are `admin` (use sudo to apply administrative privileges like root) or `root`. Allowed values for Windows are `admin` (has administrative privileges like administrator) or `administrator`.
     */
    defaultUser?: 'root' | 'admin' | 'administrator';
    /**
     * Set attributes in the addons object for the corresponding ones that need to be added to the instance
     */
    addOns?: CreateInstanceAddons;
    /**
     * Application ID
     */
    applicationId?: string;
};

export type CreateInstanceResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Instance's id
     */
    instanceId: number;
    /**
     * Creation date for instance
     */
    createdDate: string;
    /**
     * Image's id
     */
    imageId: string;
    /**
     * Product ID
     */
    productId: string;
    /**
     * Instance Region where the compute instance should be located.
     */
    region: string;
    addOns: Array<AddOnResponse>;
    /**
     * Type of operating system (OS)
     */
    osType: string;
    /**
     * Instance's status
     */
    status: InstanceStatus;
    /**
     * Array of `secretId`s of public SSH keys for logging into as `defaultUser` with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management API.
     */
    sshKeys: Array<number>;
};

export type CreateInstanceResponse = {
    data: Array<CreateInstanceResponseData>;
    _links: SelfLinks;
};

export type CancelInstanceRequest = {
    /**
     * Date of cancellation
     */
    cancelDate?: string;
};

export type CancelInstanceResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Instance's id
     */
    instanceId: number;
    /**
     * The date on which the instance will be cancelled
     */
    cancelDate: string;
};

export type CancelInstanceResponse = {
    data: Array<CancelInstanceResponseData>;
    _links: SelfLinks;
};

export type FirewallingUpgradeRequest = {
    /**
     * List of IDs of firewalls the upgraded instance should be assigned to immediately.   If the list is empty or this property is not provided the instance will be assigned to   your current default firewall.
     */
    assignFirewalls?: Array<string>;
};

export type PrivateNetworkingUpgradeRequest = {
    [key: string]: unknown;
};

export type Backup = {
    [key: string]: unknown;
};

export type AddOnQuantityRequest = {
    /**
     * The number of Addons you wish to aquire.
     */
    quantity: number;
};

export type UpgradeInstanceRequest = {
    /**
     * Set this attribute if you want to upgrade your instance with the Private Networking addon. Please provide an empty object for the time being as value. There will be more configuration possible in the future.
     */
    privateNetworking?: PrivateNetworkingUpgradeRequest;
    /**
     * Set this attribute if you want to upgrade your instance with the Automated Backup addon.   Please provide an empty object for the time being as value. There will be more configuration possible   in the future.
     */
    backup?: Backup;
};

export type InstancesActionsAuditResponse = {
    /**
     * The ID of the audit entry.
     */
    id: number;
    /**
     * Type of the action.
     */
    action: 'CREATED' | 'UPDATED' | 'DELETED';
    /**
     * When the change took place.
     */
    timestamp: string;
    /**
     * Customer tenant id
     */
    tenantId: string;
    /**
     * Customer ID
     */
    customerId: string;
    /**
     * Id of user who performed the change
     */
    changedBy: string;
    /**
     * Name of the user which led to the change.
     */
    username: string;
    /**
     * The requestId of the API call which led to the change.
     */
    requestId: string;
    /**
     * The traceId of the API call which led to the change.
     */
    traceId: string;
    /**
     * The identifier of the instancesActions
     */
    instanceId: number;
    /**
     * List of actual changes.
     */
    changes?: {
        [key: string]: unknown;
    };
};

export type ListInstancesActionsAuditResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<InstancesActionsAuditResponse>;
    _links: Links;
};

export type InstancesAuditResponse = {
    /**
     * The ID of the audit entry.
     */
    id: number;
    /**
     * Type of the action.
     */
    action: 'CREATED' | 'UPDATED' | 'DELETED';
    /**
     * When the change took place.
     */
    timestamp: string;
    /**
     * Customer tenant id
     */
    tenantId: string;
    /**
     * Customer ID
     */
    customerId: string;
    /**
     * Id of user who performed the change
     */
    changedBy: string;
    /**
     * Name of the user which led to the change.
     */
    username: string;
    /**
     * The requestId of the API call which led to the change.
     */
    requestId: string;
    /**
     * The traceId of the API call which led to the change.
     */
    traceId: string;
    /**
     * The identifier of the instance
     */
    instanceId: number;
    /**
     * List of actual changes.
     */
    changes?: {
        [key: string]: unknown;
    };
};

export type ListInstancesAuditResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<InstancesAuditResponse>;
    _links: Links;
};

export type AssignedTagResponse = {
    /**
     * Tag's id
     */
    tagId: number;
    /**
     * Tag's name
     */
    tagName: string;
};

export type ListImageResponseData = {
    /**
     * Image's id
     */
    imageId: string;
    /**
     * Your customer tenant id
     */
    tenantId: 'DE' | 'INT';
    /**
     * Customer ID
     */
    customerId: string;
    /**
     * Image Name
     */
    name: string;
    /**
     * Image Description
     */
    description: string;
    /**
     * URL from where the image has been downloaded / provided.
     */
    url: string;
    /**
     * Image Size in MB
     */
    sizeMb: number;
    /**
     * Image Uploaded Size in MB
     */
    uploadedSizeMb: number;
    /**
     * Type of operating system (OS)
     */
    osType: string;
    /**
     * Version number to distinguish the contents of an image. Could be the version of the operating system for example.
     */
    version: string;
    /**
     * Image format
     */
    format: 'iso' | 'qcow2';
    /**
     * Image status (e.g. if image is still downloading)
     */
    status: string;
    /**
     * Image download error message
     */
    errorMessage: string;
    /**
     * Flag indicating that image is either a standard (true) or a custom image (false)
     */
    standardImage: boolean;
    /**
     * The creation date time for the image
     */
    creationDate: string;
    /**
     * The last modified date time for the image
     */
    lastModifiedDate: string;
    /**
     * The tags assigned to the image
     */
    tags: Array<AssignedTagResponse>;
};

export type ListImageResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<ListImageResponseData>;
    _links: Links;
};

export type CreateCustomImageRequest = {
    /**
     * Image Name
     */
    name: string;
    /**
     * Image Description
     */
    description?: string;
    /**
     * URL from where the image has been downloaded / provided.
     */
    url: string;
    /**
     * Provided type of operating system (OS). Please specify `Windows` for MS Windows and `Linux` for other OS. Specifying wrong OS type may lead to disfunctional cloud instance.
     */
    osType: 'Windows' | 'Linux';
    /**
     * Version number to distinguish the contents of an image. Could be the version of the operating system for example.
     */
    version: string;
};

export type CreateCustomImageResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Image's id
     */
    imageId: string;
};

export type CreateCustomImageResponse = {
    data: Array<CreateCustomImageResponseData>;
    _links: SelfLinks;
};

export type CreateCustomImageFailResponse = {
    /**
     * Unsupported Media Type: Please provide a direct link to an .iso or .qcow2 image.
     */
    message: string;
    /**
     * statuscode:415
     */
    statusCode: number;
};

export type ImageResponse = {
    /**
     * Image's id
     */
    imageId: string;
    /**
     * Your customer tenant id
     */
    tenantId: 'DE' | 'INT';
    /**
     * Customer ID
     */
    customerId: string;
    /**
     * Image Name
     */
    name: string;
    /**
     * Image Description
     */
    description: string;
    /**
     * URL from where the image has been downloaded / provided.
     */
    url: string;
    /**
     * Image Size in MB
     */
    sizeMb: number;
    /**
     * Image Uploaded Size in MB
     */
    uploadedSizeMb: number;
    /**
     * Type of operating system (OS)
     */
    osType: string;
    /**
     * Version number to distinguish the contents of an image. Could be the version of the operating system for example.
     */
    version: string;
    /**
     * Image format
     */
    format: 'iso' | 'qcow2';
    /**
     * Image status (e.g. if image is still downloading)
     */
    status: string;
    /**
     * Image download error message
     */
    errorMessage: string;
    /**
     * Flag indicating that image is either a standard (true) or a custom image (false)
     */
    standardImage: boolean;
    /**
     * The creation date time for the image
     */
    creationDate: string;
    /**
     * The last modified date time for the image
     */
    lastModifiedDate: string;
};

export type FindImageResponse = {
    data: Array<ImageResponse>;
    _links: SelfLinks;
};

export type UpdateCustomImageRequest = {
    /**
     * Image Name
     */
    name?: string;
    /**
     * Image Description
     */
    description?: string;
};

export type UpdateCustomImageResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Image's id
     */
    imageId: string;
};

export type UpdateCustomImageResponse = {
    data: Array<UpdateCustomImageResponseData>;
    _links: SelfLinks;
};

export type CustomImagesStatsResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * The number of existing custom images
     */
    currentImagesCount: number;
    /**
     * Total available disk space in MB
     */
    totalSizeMb: number;
    /**
     * Used disk space in MB
     */
    usedSizeMb: number;
    /**
     * Free disk space in MB
     */
    freeSizeMb: number;
};

export type CustomImagesStatsResponse = {
    data: Array<CustomImagesStatsResponseData>;
    _links: SelfLinks;
};

export type SnapshotResponse = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Snapshot's id
     */
    snapshotId: string;
    /**
     * The name of the snapshot.
     */
    name: string;
    /**
     * The description of the snapshot.
     */
    description: string;
    /**
     * The instance identifier associated with the snapshot
     */
    instanceId: number;
    /**
     * The date when the snapshot was created
     */
    createdDate: string;
    /**
     * The date when the snapshot will be auto-deleted
     */
    autoDeleteDate: string;
    /**
     * Image Id the snapshot was taken on
     */
    imageId: string;
    /**
     * Image name the snapshot was taken on
     */
    imageName: string;
};

export type ListSnapshotResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<SnapshotResponse>;
    _links: Links;
};

export type CreateSnapshotRequest = {
    /**
     * The name of the snapshot. It may contain letters, numbers, spaces, dashes. There is a limit of 30 characters per snapshot.
     */
    name: string;
    /**
     * The description of the snapshot. There is a limit of 255 characters per snapshot.
     */
    description?: string;
};

export type CreateSnapshotResponse = {
    data: Array<SnapshotResponse>;
    _links: SelfLinks;
};

export type FindSnapshotResponse = {
    data: Array<SnapshotResponse>;
    _links: SelfLinks;
};

export type UpdateSnapshotRequest = {
    /**
     * The name of the snapshot. Tags may contain only letters, numbers, spaces, dashes. There is a limit of 30 characters per snapshot.
     */
    name?: string;
    /**
     * The description of the snapshot. There is a limit of 255 characters per snapshot.
     */
    description?: string;
};

export type UpdateSnapshotResponse = {
    data: Array<SnapshotResponse>;
    _links: SelfLinks;
};

export type RollbackSnapshotRequest = {
    [key: string]: unknown;
};

export type RollbackSnapshotResponse = {
    /**
     * Links for easy navigation.
     */
    _links: SelfLinks;
};

export type ApplicationConfig = {
    /**
     * Image ID
     */
    imageId: string;
    /**
     * User Data ID
     */
    userDataId: string;
    /**
     * [Cloud-Init](https://cloud-init.io/) Config in order to customize during start of compute instance.
     */
    userData: string;
};

export type MinimumRequirements = {
    /**
     * CPU Cores Requirement
     */
    cpuCores?: number;
    /**
     * Memory Requirement in MB
     */
    ramMb?: number;
    /**
     * Storage Requirement in MB
     */
    diskMb?: number;
    /**
     * Valid Product IDs for this application
     */
    validProductIds?: Array<string>;
};

export type OptimalRequirements = {
    /**
     * CPU Cores Requirement
     */
    cpuCores?: number;
    /**
     * Memory Requirement in MB
     */
    ramMb?: number;
    /**
     * Storage Requirement in MB
     */
    diskMb?: number;
    /**
     * Valid Product IDs for this application
     */
    validProductIds?: Array<string>;
};

export type ApplicationRequirements = {
    /**
     * Application minimum requirements
     */
    minimum?: MinimumRequirements;
    /**
     * Application optimal requirements
     */
    optimal?: OptimalRequirements;
};

export type ApplicationResponse = {
    /**
     * Application ID
     */
    applicationId: string;
    /**
     * Tenant ID
     */
    tenantId: 'DE' | 'INT';
    /**
     * Customer ID
     */
    customerId: string;
    /**
     * Application Name
     */
    name: string;
    /**
     * Application Description
     */
    description: string;
    /**
     * Application type
     */
    type: 'standard' | 'crypto';
    /**
     * Application Config
     */
    applicationConfig: Array<ApplicationConfig>;
    /**
     * Application Requirements
     */
    requirements: ApplicationRequirements;
};

export type ListApplicationsResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<ApplicationResponse>;
    _links: Links;
};

export type VncResponse = {
    /**
     * Your customer tenant id
     */
    tenantId: 'DE' | 'INT';
    /**
     * Customer ID
     */
    customerId: string;
    /**
     * Instance ID
     */
    instanceId: number;
    /**
     * VNC Status for the instance.
     */
    enabled: boolean;
    /**
     * VNC IP for the instance.
     */
    vncIp: string;
    /**
     * VNC Port for the instance.
     */
    vncPort: number;
};

export type FindVncResponse = {
    data: Array<VncResponse>;
    _links: SelfLinks;
};

export type PatchVncRequest = {
    /**
     * Password for instance VNC
     */
    vncPassword: string;
};

export type ImageAuditResponseData = {
    /**
     * The ID of the audit entry.
     */
    id: number;
    /**
     * Type of the action.
     */
    action: 'CREATED' | 'UPDATED' | 'DELETED';
    /**
     * When the change took place.
     */
    timestamp: string;
    /**
     * Customer tenant id
     */
    tenantId: string;
    /**
     * Customer ID
     */
    customerId: string;
    /**
     * Id of user who performed the change
     */
    changedBy: string;
    /**
     * Name of the user which led to the change.
     */
    username: string;
    /**
     * The requestId of the API call which led to the change.
     */
    requestId: string;
    /**
     * The traceId of the API call which led to the change.
     */
    traceId: string;
    /**
     * The identifier of the image
     */
    imageId: string;
    /**
     * List of actual changes.
     */
    changes?: {
        [key: string]: unknown;
    };
};

export type ImageAuditResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<ImageAuditResponseData>;
    _links: Links;
};

export type SnapshotsAuditResponse = {
    /**
     * The ID of the audit entry.
     */
    id: number;
    /**
     * Type of the action.
     */
    action: 'CREATED' | 'UPDATED' | 'DELETED';
    /**
     * When the change took place.
     */
    timestamp: string;
    /**
     * Customer tenant id
     */
    tenantId: string;
    /**
     * Customer ID
     */
    customerId: string;
    /**
     * Id of user who performed the change
     */
    changedBy: string;
    /**
     * Name of the user which led to the change.
     */
    username: string;
    /**
     * The requestId of the API call which led to the change.
     */
    requestId: string;
    /**
     * The traceId of the API call which led to the change.
     */
    traceId: string;
    /**
     * The identifier of the instance
     */
    instanceId: number;
    /**
     * The identifier of the snapshot
     */
    snapshotId: string;
    /**
     * List of actual changes
     */
    changes?: {
        [key: string]: unknown;
    };
};

export type ListSnapshotsAuditResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<SnapshotsAuditResponse>;
    _links: Links;
};

export type AutoScalingTypeResponse = {
    /**
     * State of the autoscaling for the current object storage.
     */
    state: 'enabled' | 'disabled' | 'error';
    /**
     * Autoscaling size limit for the current object storage.
     */
    sizeLimitTB: number;
    /**
     * Error message
     */
    errorMessage?: string;
};

export type ObjectStorageResponse = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Your object storage id
     */
    objectStorageId: string;
    /**
     * Creation date for object storage.
     */
    createdDate: string;
    /**
     * Cancellation date for object storage.
     */
    cancelDate: string;
    /**
     * Autoscaling settings
     */
    autoScaling: AutoScalingTypeResponse;
    /**
     * Data center your object storage is located
     */
    dataCenter: string;
    /**
     * Amount of purchased / requested object storage in TB.
     */
    totalPurchasedSpaceTB: number;
    /**
     * S3 URL to connect to your S3 compatible object storage
     */
    s3Url: string;
    /**
     * Your S3 tenantId. Only required for public sharing.
     */
    s3TenantId: string;
    /**
     * The object storage status
     */
    status: 'READY' | 'PROVISIONING' | 'UPGRADING' | 'CANCELLED' | 'ERROR' | 'DISABLED' | 'MANUAL_PROVISIONING' | 'PRODUCT_NOT_AVAILABLE' | 'LIMIT_EXCEEDED' | 'VERIFICATION_REQUIRED' | 'ORDER_PROCESSING' | 'PENDING_PAYMENT' | 'UNKNOWN';
    /**
     * The region where your object storage is located
     */
    region: string;
    /**
     * Display name for object storage.
     */
    displayName: string;
};

export type ListObjectStorageResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<ObjectStorageResponse>;
    _links: Links;
};

export type DataCenterResponse = {
    /**
     * Name of the data center
     */
    name: string;
    /**
     * Slug of the data center
     */
    slug: string;
    capabilities: Array<'VPS' | 'VDS' | 'Object-Storage' | 'Private-Networking'>;
    /**
     * S3 URL of the data center
     */
    s3Url: string;
    /**
     * Name of the region
     */
    regionName: string;
    /**
     * Slug of the region
     */
    regionSlug: string;
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
};

export type ListDataCenterResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<DataCenterResponse>;
    _links: Links;
};

export type AutoScalingTypeRequest = {
    /**
     * State of the autoscaling for the current object storage.
     */
    state: 'enabled' | 'disabled';
    /**
     * Autoscaling size limit for the current object storage.
     */
    sizeLimitTB: number;
};

export type CreateObjectStorageRequest = {
    /**
     * Region where the object storage should be located. Default is EU. Available regions: EU, US-central, SIN
     */
    region: string;
    /**
     * Autoscaling settings
     */
    autoScaling?: AutoScalingTypeRequest;
    /**
     * Amount of purchased / requested object storage in TB.
     */
    totalPurchasedSpaceTB: number;
    /**
     * Display name helps to differentiate between object storages, especially if they are in the same region. If display name is not provided, it will be generated. Display name can be changed any time.
     */
    displayName?: string;
};

export type CreateObjectStorageResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Your object storage id
     */
    objectStorageId: string;
    /**
     * Creation date for object storage.
     */
    createdDate: string;
    /**
     * Cancellation date for object storage.
     */
    cancelDate: string;
    /**
     * Autoscaling settings
     */
    autoScaling: AutoScalingTypeResponse;
    /**
     * The data center of the storage
     */
    dataCenter: string;
    /**
     * Amount of purchased / requested object storage in TB.
     */
    totalPurchasedSpaceTB: number;
    /**
     * Currently used space in TB.
     */
    usedSpaceTB: number;
    /**
     * Currently used space in percentage.
     */
    usedSpacePercentage: number;
    /**
     * S3 URL to connect to your S3 compatible object storage
     */
    s3Url: string;
    /**
     * Your S3 tenantId. Only required for public sharing.
     */
    s3TenantId: string;
    /**
     * The object storage status
     */
    status: 'READY' | 'PROVISIONING' | 'UPGRADING' | 'CANCELLED' | 'ERROR' | 'DISABLED' | 'MANUAL_PROVISIONING' | 'PRODUCT_NOT_AVAILABLE' | 'LIMIT_EXCEEDED' | 'VERIFICATION_REQUIRED' | 'ORDER_PROCESSING' | 'PENDING_PAYMENT' | 'UNKNOWN';
    /**
     * The region where your object storage is located
     */
    region: string;
    /**
     * Display name for object storage.
     */
    displayName: string;
};

export type CreateObjectStorageResponse = {
    data: Array<CreateObjectStorageResponseData>;
    _links: SelfLinks;
};

export type FindObjectStorageResponse = {
    data: Array<ObjectStorageResponse>;
    _links: SelfLinks;
};

export type UpgradeAutoScalingType = {
    /**
     * State of the autoscaling for the current object storage.
     */
    state?: 'enabled' | 'disabled';
    /**
     * Autoscaling size limit for the current object storage.
     */
    sizeLimitTB?: number;
};

export type UpgradeObjectStorageRequest = {
    /**
     * New monthly object storage size limit for autoscaling if enabled.
     */
    autoScaling?: UpgradeAutoScalingType;
    /**
     * New total object storage limit. If this number is larger than before you will also be billed for the added storage space. No downgrade possible.
     */
    totalPurchasedSpaceTB?: number;
};

export type UpgradeObjectStorageResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Object storage id
     */
    objectStorageId: string;
    /**
     * Creation date for object storage.
     */
    createdDate: string;
    /**
     * Data center of the object storage.
     */
    dataCenter: string;
    /**
     * The autoscaling limit of the object storage.
     */
    autoScaling: AutoScalingTypeResponse;
    /**
     * S3 URL to connect to your S3 compatible object storage
     */
    s3Url: string;
    /**
     * The object storage status
     */
    status: 'READY' | 'PROVISIONING' | 'UPGRADING' | 'CANCELLED' | 'ERROR' | 'DISABLED' | 'MANUAL_PROVISIONING' | 'PRODUCT_NOT_AVAILABLE' | 'LIMIT_EXCEEDED' | 'VERIFICATION_REQUIRED' | 'ORDER_PROCESSING' | 'PENDING_PAYMENT' | 'UNKNOWN';
    /**
     * Total purchased object storage space in TB.
     */
    totalPurchasedSpaceTB: number;
    /**
     * The region where your object storage is located
     */
    region: string;
    /**
     * Display name for object storage.
     */
    displayName: string;
};

export type UpgradeObjectStorageResponse = {
    _links: SelfLinks;
    data: Array<UpgradeObjectStorageResponseData>;
};

export type ObjectStoragesStatsResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Currently used space in TB.
     */
    usedSpaceTB: number;
    /**
     * Currently used space in percentage.
     */
    usedSpacePercentage: number;
    /**
     * Number of all objects (i.e. files and folders) in object storage.
     */
    numberOfObjects: number;
};

export type ObjectStoragesStatsResponse = {
    data: Array<ObjectStoragesStatsResponseData>;
    _links: SelfLinks;
};

export type CancelObjectStorageRequest = {
    /**
     * Date of cancellation
     */
    cancelDate?: string;
};

export type CancelObjectStorageResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Object Storage id
     */
    objectStorageId: string;
    /**
     * Cancellation date for object storage.
     */
    cancelDate: string;
    /**
     * Display name for object storage.
     */
    displayName: string;
};

export type CancelObjectStorageResponse = {
    _links: SelfLinks;
    data: Array<CancelObjectStorageResponseData>;
};

export type PatchObjectStorageRequest = {
    /**
     * Display name helps to differentiate between object storages, especially if they are in the same region.
     */
    displayName: string;
};

export type CreateTicketRequest = {
    /**
     * The ticket subject
     */
    subject: string;
    /**
     * The ticket note
     */
    note: string;
    /**
     * Customer email
     */
    sender: string;
};

export type CreateTicketResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
};

export type CreateTicketResponse = {
    data: Array<CreateTicketResponseData>;
    _links: SelfLinks;
};

export type ObjectStorageAuditResponse = {
    /**
     * The identifier of the audit entry.
     */
    id: number;
    /**
     * Type of the action.
     */
    action: 'CREATED' | 'UPDATED' | 'DELETED';
    /**
     * When the change took place.
     */
    timestamp: string;
    /**
     * Customer tenant id
     */
    tenantId: string;
    /**
     * Customer number
     */
    customerId: string;
    /**
     * User ID
     */
    changedBy: string;
    /**
     * Name of the user which led to the change.
     */
    username: string;
    /**
     * The requestId of the API call which led to the change.
     */
    requestId: string;
    /**
     * The traceId of the API call which led to the change.
     */
    traceId: string;
    /**
     * Object Storage Id
     */
    objectStorageId: string;
    /**
     * List of actual changes.
     */
    changes?: {
        [key: string]: unknown;
    };
};

export type ListObjectStorageAuditResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<ObjectStorageAuditResponse>;
    _links: Links;
};

export type PrivateIpConfig = {
    v4: Array<IpV4>;
};

export type Instances = {
    /**
     * Instance id
     */
    instanceId: number;
    /**
     * Instance display name
     */
    displayName: string;
    /**
     * Instance name
     */
    name: string;
    /**
     * Product id
     */
    productId: string;
    privateIpConfig: PrivateIpConfig;
    ipConfig: IpConfig;
    /**
     * State of the instance in the Private Network
     */
    status: 'ok' | 'restart' | 'reinstall' | 'reinstallation failed' | 'installing';
    /**
     * Message in case of an error.
     */
    errorMessage?: string;
};

export type ListPrivateNetworkResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Private Network's id
     */
    privateNetworkId: number;
    /**
     * The data center where your Private Network is located
     */
    dataCenter: string;
    /**
     * The slug of the region where your Private Network is located
     */
    region: string;
    /**
     * The region where your Private Network is located
     */
    regionName: string;
    /**
     * The name of the Private Network
     */
    name: string;
    /**
     * The description of the Private Network
     */
    description: string;
    /**
     * The cidr range of the Private Network
     */
    cidr: string;
    /**
     * The total available IPs of the Private Network
     */
    availableIps: number;
    /**
     * The creation date of the Private Network
     */
    createdDate: string;
    instances: Array<Instances>;
};

export type ListPrivateNetworkResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<ListPrivateNetworkResponseData>;
    _links: Links;
};

export type CreatePrivateNetworkRequest = {
    /**
     * Region where the Private Network should be located. Default is `EU`
     */
    region?: string;
    /**
     * The name of the Private Network. It may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per Private Network name.
     */
    name: string;
    /**
     * The description of the Private Network. There is a limit of 255 characters per Private Network description.
     */
    description?: string;
};

export type PrivateNetworkResponse = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Private Network's id
     */
    privateNetworkId: number;
    /**
     * The data center where your Private Network is located
     */
    dataCenter: string;
    /**
     * The slug of the region where your Private Network is located
     */
    region: string;
    /**
     * The region where your Private Network is located
     */
    regionName: string;
    /**
     * The name of the Private Network
     */
    name: string;
    /**
     * The description of the Private Network
     */
    description: string;
    /**
     * The cidr range of the Private Network
     */
    cidr: string;
    /**
     * The total available IPs of the Private Network
     */
    availableIps: number;
    /**
     * The creation date of the Private Network
     */
    createdDate: string;
    instances: Array<Instances>;
};

export type CreatePrivateNetworkResponse = {
    data: Array<PrivateNetworkResponse>;
    _links: SelfLinks;
};

export type PatchPrivateNetworkRequest = {
    /**
     * The name of the Private Network. It may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per Private Network.
     */
    name?: string;
    /**
     * The description of the Private Network. There is a limit of 255 characters per Private Network.
     */
    description?: string;
};

export type PatchPrivateNetworkResponse = {
    data: Array<PrivateNetworkResponse>;
    _links: SelfLinks;
};

export type FindPrivateNetworkResponse = {
    data: Array<PrivateNetworkResponse>;
    _links: SelfLinks;
};

export type InstanceAssignmentSelfLinks = {
    /**
     * Link to current resource.
     */
    self: string;
    /**
     * Link to related Private Network.
     */
    virtualPrivateCloud: string;
    /**
     * Link to assigned instance.
     */
    instance: string;
};

export type AssignInstancePrivateNetworkResponse = {
    /**
     * Links for easy navigation.
     */
    _links: InstanceAssignmentSelfLinks;
};

export type UnassignInstancePrivateNetworkResponse = {
    /**
     * Links for easy navigation.
     */
    _links: InstanceAssignmentSelfLinks;
};

export type PrivateNetworkAuditResponse = {
    /**
     * The identifier of the audit entry.
     */
    id: number;
    /**
     * The identifier of the Private Network
     */
    privateNetworkId: number;
    /**
     * Type of the action.
     */
    action: 'CREATED' | 'DELETED' | 'UPDATED';
    /**
     * When the change took place.
     */
    timestamp: string;
    /**
     * Customer tenant id
     */
    tenantId: string;
    /**
     * Customer number
     */
    customerId: string;
    /**
     * User id
     */
    changedBy: string;
    /**
     * User name which did the change.
     */
    username: string;
    /**
     * The requestId of the API call which led to the change.
     */
    requestId: string;
    /**
     * The traceId of the API call which led to the change.
     */
    traceId: string;
    /**
     * List of actual changes.
     */
    changes?: {
        [key: string]: unknown;
    };
};

export type ListPrivateNetworkAuditResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<PrivateNetworkAuditResponse>;
    _links: Links;
};

export type SecretResponse = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your Customer number
     */
    customerId: string;
    /**
     * Secret's id
     */
    secretId: number;
    /**
     * The name assigned to the password/ssh
     */
    name: string;
    /**
     * The type of the secret. This will be available only when retrieving secrets
     */
    type: 'password' | 'ssh';
    /**
     * The value of the secret. This will be available only when retrieving a single secret
     */
    value: string;
    /**
     * The creation date for the secret
     */
    createdAt: string;
    /**
     * The last update date for the secret
     */
    updatedAt: string;
};

export type ListSecretResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<SecretResponse>;
    _links: SelfLinks;
};

export type CreateSecretRequest = {
    /**
     * The name of the secret that will keep the password
     */
    name: string;
    /**
     * The secret value that needs to be saved. In case of a password it must match a pattern with at least one upper and lower case character and either one number with two special characters `!@#$^&*?_~` or at least three numbers with one special character `!@#$^&*?_~`. This is expressed in the following regular expression: `^((?=.*?[A-Z]{1,})(?=.*?[a-z]{1,}))(((?=(?:[^d]*d){1})(?=([^^&*?_~]*[!@#$^&*?_~]){2,}))|((?=(?:[^d]*d){3})(?=.*?[!@#$^&*?_~]+))).{8,}$`
     */
    value: string;
    /**
     * The type of the secret. Can be `password` or `ssh`
     */
    type: 'password' | 'ssh';
};

export type CreateSecretResponse = {
    data: Array<SecretResponse>;
    _links: SelfLinks;
};

export type FindSecretResponse = {
    data: Array<SecretResponse>;
    _links: SelfLinks;
};

export type UpdateSecretRequest = {
    /**
     * The name of the secret to be saved
     */
    name?: string;
    /**
     * The value of the secret to be saved
     */
    value?: string;
};

export type UpdateSecretResponse = {
    /**
     * Links for easy navigation.
     */
    _links: SelfLinks;
};

export type SecretAuditResponse = {
    /**
     * The identifier of the audit entry.
     */
    id: number;
    /**
     * Secret's id
     */
    secretId: number;
    /**
     * Type of the action.
     */
    action: 'CREATED' | 'UPDATED' | 'DELETED';
    /**
     * When the change took place.
     */
    timestamp: string;
    /**
     * Customer tenant id
     */
    tenantId: string;
    /**
     * Customer number
     */
    customerId: string;
    /**
     * User ID
     */
    changedBy: string;
    /**
     * Name of the user which led to the change.
     */
    username: string;
    /**
     * The requestId of the API call which led to the change.
     */
    requestId: string;
    /**
     * The traceId of the API call which led to the change.
     */
    traceId: string;
    /**
     * List of actual changes.
     */
    changes?: {
        [key: string]: unknown;
    };
};

export type ListSecretAuditResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<SecretAuditResponse>;
    _links: Links;
};

export type IpV41 = {
    /**
     * IP address
     */
    ip: string;
    /**
     * Gateway
     */
    gateway: string;
    /**
     * Netmask CIDR
     */
    netmaskCidr: number;
    /**
     * Broadcast address
     */
    broadcast: string;
    /**
     * Net address
     */
    net: string;
};

export type ListVipResponseData = {
    /**
     * Tenant Id.
     */
    tenantId: string;
    /**
     * Customer's Id.
     */
    customerId: string;
    /**
     * Vip uuid.
     */
    vipId: string;
    /**
     * data center.
     */
    dataCenter: string;
    /**
     * Region
     */
    region: string;
    /**
     * Resource Id.
     */
    resourceId: string;
    /**
     * The resourceType using the VIP.
     */
    resourceType?: 'instances' | 'bare-metal' | 'null';
    /**
     * Resource name.
     */
    resourceName: string;
    /**
     * Resource display name.
     */
    resourceDisplayName: string;
    /**
     * Version of Ip.
     */
    ipVersion: 'v4';
    /**
     * The VIP type.
     */
    type?: 'additional' | 'floating';
    v4?: IpV41;
};

export type ListVipResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<ListVipResponseData>;
    _links: Links;
};

export type VipResponse = {
    /**
     * Tenant Id.
     */
    tenantId: string;
    /**
     * Customer's Id.
     */
    customerId: string;
    /**
     * Vip uuid.
     */
    vipId: string;
    /**
     * data center.
     */
    dataCenter: string;
    /**
     * Region
     */
    region: string;
    /**
     * Resource Id.
     */
    resourceId: string;
    /**
     * The resourceType using the VIP.
     */
    resourceType?: 'instances' | 'bare-metal' | 'null';
    /**
     * Resource name.
     */
    resourceName: string;
    /**
     * Resource display name.
     */
    resourceDisplayName: string;
    /**
     * Version of Ip.
     */
    ipVersion: 'v4';
    /**
     * The VIP type.
     */
    type?: 'additional' | 'floating';
    v4?: IpV41;
};

export type FindVipResponse = {
    data: Array<VipResponse>;
    _links: SelfLinks;
};

export type AssignVipResponse = {
    data: Array<VipResponse>;
    _links: SelfLinks;
};

export type VipAuditResponse = {
    /**
     * The identifier of the audit entry.
     */
    id: number;
    /**
     * The identifier of the VIP
     */
    vipId: string;
    /**
     * Type of the action.
     */
    action: 'CREATED' | 'DELETED' | 'UPDATED';
    /**
     * When the change took place.
     */
    timestamp: string;
    /**
     * Customer tenant id
     */
    tenantId: string;
    /**
     * Customer number
     */
    customerId: string;
    /**
     * User id
     */
    changedBy: string;
    /**
     * User name which did the change.
     */
    username: string;
    /**
     * The requestId of the API call which led to the change.
     */
    requestId: string;
    /**
     * The traceId of the API call which led to the change.
     */
    traceId: string;
    /**
     * List of actual changes.
     */
    changes?: {
        [key: string]: unknown;
    };
};

export type ListVipAuditResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<VipAuditResponse>;
    _links: Links;
};

export type TagResponse = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Tag's id
     */
    tagId: number;
    /**
     * Tag's name
     */
    name: string;
    /**
     * Tag's color
     */
    color: string;
};

export type ListTagResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<TagResponse>;
    _links: Links;
};

export type CreateTagRequest = {
    /**
     * The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per tag.
     */
    name: string;
    /**
     * The color of the tag. Color can be specified using hexadecimal value. Default color is #0A78C3
     */
    color: string;
};

export type CreateTagResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Tag's id
     */
    tagId: number;
};

export type CreateTagResponse = {
    data: Array<CreateTagResponseData>;
    _links: SelfLinks;
};

export type FindTagResponse = {
    data: Array<TagResponse>;
    _links: SelfLinks;
};

export type UpdateTagRequest = {
    /**
     * The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per tag.
     */
    name?: string;
    /**
     * The color of the tag. Color can be specified using hexadecimal value. Default color is #0A78C3
     */
    color?: string;
};

export type UpdateTagResponse = {
    /**
     * Links for easy navigation.
     */
    _links: SelfLinks;
};

export type AssignmentResponse = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * The identifier of the tag.
     */
    tagId: number;
    /**
     * Tag's name
     */
    tagName: string;
    /**
     * Resource type. Resource type is one of `instance|image|object-storage`.
     */
    resourceType: string;
    /**
     * Resource id
     */
    resourceId: string;
    /**
     * Resource name
     */
    resourceName: string;
};

export type ListAssignmentResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<AssignmentResponse>;
    _links: Links;
};

export type TagAssignmentSelfLinks = {
    /**
     * Link to current resource.
     */
    self: string;
    /**
     * Link to related tag.
     */
    tag: string;
    /**
     * Link to assigned resource
     */
    _resource: string;
};

export type FindAssignmentResponse = {
    data: Array<AssignmentResponse>;
    _links: TagAssignmentSelfLinks;
};

export type CreateAssignmentResponse = {
    /**
     * Links for easy navigation.
     */
    _links: TagAssignmentSelfLinks;
};

export type TagAuditResponse = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * The identifier of the audit entry.
     */
    id: number;
    /**
     * The identifier of the audit entry.
     */
    tagId: number;
    /**
     * Type of the action.
     */
    action: 'CREATED' | 'DELETED' | 'UPDATED';
    /**
     * When the change took place.
     */
    timestamp: string;
    /**
     * User ID
     */
    changedBy: string;
    /**
     * Name of the user which led to the change.
     */
    username: string;
    /**
     * The requestId of the API call which led to the change.
     */
    requestId: string;
    /**
     * The traceId of the API call which led to the change.
     */
    traceId: string;
    /**
     * List of actual changes.
     */
    changes?: {
        [key: string]: unknown;
    };
};

export type ListTagAuditsResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<TagAuditResponse>;
    _links: Links;
};

export type AssignmentAuditResponse = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * The identifier of the audit entry.
     */
    id: number;
    /**
     * Resource's id
     */
    resourceId: string;
    /**
     * Resource type. Resource type is one of `instance|image|object-storage`.
     */
    resourceType: string;
    /**
     * Tag's id
     */
    tagId: number;
    /**
     * Audit Action
     */
    action: 'CREATED' | 'DELETED';
    /**
     * Audit creation date
     */
    timestamp: string;
    /**
     * User ID
     */
    changedBy: string;
    /**
     * User Full Name
     */
    username: string;
    /**
     * Request ID
     */
    requestId: string;
    /**
     * Trace ID
     */
    traceId: string;
    /**
     * Changes made for a specific Tag
     */
    changes?: {
        [key: string]: unknown;
    };
};

export type ListAssignmentAuditsResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<AssignmentAuditResponse>;
    _links: Links;
};

export type ResourcePermissionsResponse = {
    /**
     * Tag's id
     */
    tagId: number;
    /**
     * Tag name. The resriction is based on the resources which have been assigned to that tag. If no resource has been assigned to the given tag, no access will be possible.
     */
    tagName: string;
};

export type PermissionResponse = {
    /**
     * API endpoint. In order to get a list availbale api enpoints please refer to the GET api-permissions endpoint.
     */
    apiName: string;
    /**
     * Action allowed for the API endpoint. Basically `CREATE` corresponds to POST endpoints, `READ` to GET endpoints, `UPDATE` to PATCH / PUT endpoints and `DELETE` to DELETE endpoints.
     */
    actions: Array<'CREATE' | 'READ' | 'UPDATE' | 'DELETE'>;
    resources?: Array<ResourcePermissionsResponse>;
};

export type RoleResponse = {
    /**
     * Role's id
     */
    roleId: number;
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Role's name
     */
    name: string;
    /**
     * Admin
     */
    admin: boolean;
    /**
     * Access All Resources
     */
    accessAllResources: boolean;
    /**
     * Role type can be either `default` or `custom`. The `default` roles cannot be modified or deleted.
     */
    type: string;
    permissions?: Array<PermissionResponse>;
};

export type UserResponse = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * The identifier of the user.
     */
    userId: string;
    /**
     * The first name of the user. Users may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user.
     */
    firstName: string;
    /**
     * The last name of the user. Users may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user.
     */
    lastName: string;
    /**
     * The email of the user to which activation and forgot password links are being sent to. There is a limit of 255 characters per email.
     */
    email: string;
    /**
     * User email verification status.
     */
    emailVerified: boolean;
    /**
     * If uses is not enabled, he can't login and thus use services any longer.
     */
    enabled: boolean;
    /**
     * Enable or disable two-factor authentication (2FA) via time based OTP.
     */
    totp: boolean;
    /**
     * The locale of the user. This can be `de-DE`, `de`, `en-US`, `en`
     */
    locale: 'de-DE' | 'de' | 'en-US' | 'en';
    /**
     * The roles as list of `roleId`s of the user.
     */
    roles: Array<RoleResponse>;
    /**
     * If user is owner he will have permissions to all API endpoints and resources. Enabling this will superseed all role definitions and `accessAllResources`.
     */
    owner: boolean;
};

export type ListUserResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<UserResponse>;
    _links: Links;
};

export type CreateUserRequest = {
    /**
     * The name of the user. Names may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user.
     */
    firstName?: string;
    /**
     * The last name of the user. Users may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user.
     */
    lastName?: string;
    /**
     * The email of the user to which activation and forgot password links are being sent to. There is a limit of 255 characters per email.
     */
    email: string;
    /**
     * If user is not enabled, he can't login and thus use services any longer.
     */
    enabled: boolean;
    /**
     * Enable or disable two-factor authentication (2FA) via time based OTP.
     */
    totp: boolean;
    /**
     * The locale of the user. This can be `de-DE`, `de`, `en-US`, `en`
     */
    locale: 'de-DE' | 'de' | 'en-US' | 'en';
    /**
     * The roles as list of `roleId`s of the user.
     */
    roles?: Array<number>;
};

export type CreateUserResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * User's id
     */
    userId: string;
};

export type CreateUserResponse = {
    data: Array<CreateUserResponseData>;
    _links: SelfLinks;
};

export type FindUserResponse = {
    data: Array<UserResponse>;
    _links: SelfLinks;
};

export type UpdateUserRequest = {
    /**
     * The name of the user. Names may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user.
     */
    firstName?: string;
    /**
     * The last name of the user. Users may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user.
     */
    lastName?: string;
    /**
     * The email of the user to which activation and forgot password links are being sent to. There is a limit of 255 characters per email.
     */
    email?: string;
    /**
     * If user is not enabled, he can't login and thus use services any longer.
     */
    enabled?: boolean;
    /**
     * Enable or disable two-factor authentication (2FA) via time based OTP.
     */
    totp?: boolean;
    /**
     * The locale of the user. This can be `de-DE`, `de`, `en-US`, `en`
     */
    locale?: 'de-DE' | 'de' | 'en-US' | 'en';
    /**
     * The roles as list of `roleId`s of the user.
     */
    roles?: Array<number>;
};

export type UpdateUserResponse = {
    /**
     * Links for easy navigation.
     */
    _links: SelfLinks;
};

export type ClientResponse = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Client's id
     */
    id: string;
    /**
     * IDM client id
     */
    clientId: string;
    /**
     * IDM client secret
     */
    secret: string;
};

export type FindClientResponse = {
    data: Array<ClientResponse>;
    _links: SelfLinks;
};

export type ClientSecretResponse = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * IDM client secret
     */
    secret: string;
};

export type GenerateClientSecretResponse = {
    data: Array<ClientSecretResponse>;
    _links: SelfLinks;
};

export type UserIsPasswordSetResponse = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Indicates if the user has set a password for his account
     */
    isPasswordSet: boolean;
};

export type FindUserIsPasswordSetResponse = {
    data: Array<UserIsPasswordSetResponse>;
    _links: SelfLinks;
};

export type ListRoleResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<RoleResponse>;
    _links: Links;
};

export type PermissionRequest = {
    /**
     * The name of the role. There is a limit of 255 characters per role.
     */
    apiName: string;
    /**
     * Action allowed for the API endpoint. Basically `CREATE` corresponds to POST endpoints, `READ` to GET endpoints, `UPDATE` to PATCH / PUT endpoints and `DELETE` to DELETE endpoints.
     */
    actions: Array<'CREATE' | 'READ' | 'UPDATE' | 'DELETE'>;
    /**
     * The IDs of tags. Only if those tags are assgined to a resource the user with that role will be able to access the resource.
     */
    resources?: Array<number>;
};

export type CreateRoleRequest = {
    /**
     * The name of the role. There is a limit of 255 characters per role.
     */
    name: string;
    /**
     * If user is admin he will have permissions to all API endpoints and resources. Enabling this will superseed all role definitions and `accessAllResources`.
     */
    admin: boolean;
    /**
     * Allow access to all resources. This will superseed all assigned resources in a role.
     */
    accessAllResources: boolean;
    permissions?: Array<PermissionRequest>;
};

export type CreateRoleResponseData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Role's id
     */
    roleId: number;
};

export type CreateRoleResponse = {
    data: Array<CreateRoleResponseData>;
    _links: SelfLinks;
};

export type FindRoleResponse = {
    data: Array<RoleResponse>;
    _links: SelfLinks;
};

export type UpdateRoleRequest = {
    /**
     * The name of the role. There is a limit of 255 characters per role.
     */
    name: string;
    /**
     * If user is admin he will have permissions to all API endpoints and resources. Enabling this will superseed all role definitions and `accessAllResources`.
     */
    admin: boolean;
    /**
     * Allow access to all resources. This will superseed all assigned resources in a role.
     */
    accessAllResources: boolean;
    permissions?: Array<PermissionRequest>;
};

export type UpdateRoleResponse = {
    /**
     * Links for easy navigation.
     */
    _links: SelfLinks;
};

export type ApiPermissionsResponse = {
    /**
     * API endpoint. In order to get a list availbale api enpoints please refer to the GET api-permissions endpoint.
     */
    apiName: string;
    /**
     * Action allowed for the API endpoint. Basically `CREATE` corresponds to POST endpoints, `READ` to GET endpoints, `UPDATE` to PATCH / PUT endpoints and `DELETE` to DELETE endpoints.
     */
    actions: Array<'CREATE' | 'READ' | 'UPDATE' | 'DELETE'>;
};

export type ListApiPermissionResponse = {
    data: Array<ApiPermissionsResponse>;
    _links: Links;
};

export type CredentialData = {
    /**
     * Your customer tenant id
     */
    tenantId: string;
    /**
     * Your customer number
     */
    customerId: string;
    /**
     * Access key ID.
     */
    accessKey: string;
    /**
     * Secret key ID.
     */
    secretKey: string;
    /**
     * Object Storage ID.
     */
    objectStorageId: string;
    /**
     * Object Storage Name.
     */
    displayName: string;
    /**
     * Object Storage Region.
     */
    region: string;
    /**
     * Object Storage Credential ID
     */
    credentialId: number;
};

export type ListCredentialResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<CredentialData>;
    _links: Links;
};

export type FindCredentialResponse = {
    data: Array<CredentialData>;
    _links: SelfLinks;
};

export type UserAuditResponse = {
    /**
     * The identifier of the audit entry.
     */
    id: number;
    /**
     * Type of the action.
     */
    action: 'CREATED' | 'UPDATED' | 'DELETED';
    /**
     * When the change took place.
     */
    timestamp: string;
    /**
     * Customer tenant id
     */
    tenantId: string;
    /**
     * Customer number
     */
    customerId: string;
    /**
     * User ID
     */
    changedBy: string;
    /**
     * Name of the user which led to the change.
     */
    username: string;
    /**
     * The requestId of the API call which led to the change.
     */
    requestId: string;
    /**
     * The traceId of the API call which led to the change.
     */
    traceId: string;
    /**
     * The identifier of the user
     */
    userId: string;
    /**
     * List of actual changes.
     */
    changes?: {
        [key: string]: unknown;
    };
};

export type ListUserAuditResponse = {
    /**
     * Data about pagination like how many results, pages, page size.
     */
    _pagination: PaginationMeta;
    data: Array<UserAuditResponse>;
    _links: Links;
};

export type RoleAuditResponse = {
    /**
     * The identifier of the audit entry.
     */
    id: number;
    /**
     * Type of the action.
     */
    action: 'CREATED' | 'UPDATED' | 'DELETED';
    /**
     * When the change took place.
     */
    timestamp: string;
    /**
     * Customer tenant id
     */
    tenantId: string;
    /**
     * Customer number
     */
    customerId: string;
    /**
     * User ID
     */
    changedBy: string;
    /**
     * Name of the user which led to the change.
     */
    username: string;
    /**
     * The requestId of the API call which led to the change.
     */
    requestId: string;
    /**
     * The traceId of the API call which led to the change.
     */
    traceId: string;
    /**
     * The identifier of the role
     */
    roleId: number;
    /**
     * List of actual changes.
     */
    changes?: {
        [key: string]: unknown;
    };
};

export type ListRoleAuditResponse = {
    data: Array<RoleAuditResponse>;
    _links: Links;
};

export type StartData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the compute instance / resource to be started in rescue mode.
         */
        instanceId: number;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}/actions/start';
};

export type StartResponses = {
    /**
     * Information of started instance
     */
    201: InstanceStartActionResponse;
};

export type StartResponse = StartResponses[keyof StartResponses];

export type RestartData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the compute instance / resource to be started in rescue mode.
         */
        instanceId: number;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}/actions/restart';
};

export type RestartResponses = {
    /**
     * Information of restarted instance
     */
    201: InstanceRestartActionResponse;
};

export type RestartResponse = RestartResponses[keyof RestartResponses];

export type StopData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the compute instance / resource to be started in rescue mode.
         */
        instanceId: number;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}/actions/stop';
};

export type StopResponses = {
    /**
     * Information of stoped instance
     */
    201: InstanceStopActionResponse;
};

export type StopResponse = StopResponses[keyof StopResponses];

export type ShutdownData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the compute instance / resource to be started in rescue mode.
         */
        instanceId: number;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}/actions/shutdown';
};

export type ShutdownResponses = {
    /**
     * Information of a shutdown instance
     */
    201: InstanceShutdownActionResponse;
};

export type ShutdownResponse = ShutdownResponses[keyof ShutdownResponses];

export type RescueData = {
    body: InstancesActionsRescueRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the compute instance / resource to be started in rescue mode.
         */
        instanceId: number;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}/actions/rescue';
};

export type RescueResponses = {
    /**
     * Information of rescued instance
     */
    201: InstanceRescueActionResponse;
};

export type RescueResponse = RescueResponses[keyof RescueResponses];

export type ResetPasswordActionData = {
    body: InstancesResetPasswordActionsRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the compute instance / resource to be started in rescue mode.
         */
        instanceId: number;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}/actions/resetPassword';
};

export type ResetPasswordActionResponses = {
    /**
     * Information of an instance password reset
     */
    201: InstanceResetPasswordActionResponse;
};

export type ResetPasswordActionResponse = ResetPasswordActionResponses[keyof ResetPasswordActionResponses];

export type RetrieveInstancesListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The name of the instance
         */
        name?: string;
        /**
         * The display name of the instance
         */
        displayName?: string;
        /**
         * The data center of the instance
         */
        dataCenter?: string;
        /**
         * The Region of the instance
         */
        region?: string;
        /**
         * The identifier of the instance (deprecated)
         * @deprecated
         */
        instanceId?: number;
        /**
         * Comma separated instances identifiers
         */
        instanceIds?: string;
        /**
         * The status of the instance
         */
        status?: 'provisioning' | 'uninstalled' | 'running' | 'stopped' | 'error' | 'installing' | 'unknown' | 'manual_provisioning' | 'product_not_available' | 'verification_required' | 'rescue' | 'pending_payment' | 'other' | 'reset_password';
        /**
         * Identifiers of the instance products
         */
        productIds?: string;
        /**
         * Identifiers of Addons the instances have
         */
        addOnIds?: string;
        /**
         * Comma separated instance's category depending on Product Id
         */
        productTypes?: string;
        /**
         * Filter instances that have an ip config
         */
        ipConfig?: boolean;
        /**
         * Full text search when listing the instances. Can be searched by `name`, `displayName`, `ipAddress`
         */
        search?: string;
    };
    url: '/v1/compute/instances';
};

export type RetrieveInstancesListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of instances.
     */
    200: ListInstancesResponse;
};

export type RetrieveInstancesListResponse = RetrieveInstancesListResponses[keyof RetrieveInstancesListResponses];

export type CreateInstanceData = {
    body: CreateInstanceRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: never;
    url: '/v1/compute/instances';
};

export type CreateInstanceResponses = {
    /**
     * The response will be a JSON object and contains standard instance attributes.
     */
    201: CreateInstanceResponse;
};

export type CreateInstanceResponse2 = CreateInstanceResponses[keyof CreateInstanceResponses];

export type RetrieveInstanceData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the instance
         */
        instanceId: number;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}';
};

export type RetrieveInstanceResponses = {
    /**
     * The response will be a JSON object and contains standard instance attributes.
     */
    200: FindInstanceResponse;
};

export type RetrieveInstanceResponse = RetrieveInstanceResponses[keyof RetrieveInstanceResponses];

export type PatchInstanceData = {
    body: PatchInstanceRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the instance
         */
        instanceId: number;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}';
};

export type PatchInstanceResponses = {
    /**
     * The response will be a JSON object and contains instanceId and createdDate.
     */
    200: PatchInstanceResponse;
};

export type PatchInstanceResponse2 = PatchInstanceResponses[keyof PatchInstanceResponses];

export type ReinstallInstanceData = {
    body: ReinstallInstanceRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the instance
         */
        instanceId: number;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}';
};

export type ReinstallInstanceResponses = {
    /**
     * The response will be a JSON object and contains instanceId and createdDate.
     */
    200: ReinstallInstanceResponse;
};

export type ReinstallInstanceResponse2 = ReinstallInstanceResponses[keyof ReinstallInstanceResponses];

export type CancelInstanceData = {
    body: CancelInstanceRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the instance
         */
        instanceId: number;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}/cancel';
};

export type CancelInstanceResponses = {
    /**
     * The response will be a JSON object and contains standard custom image attributes
     */
    201: CancelInstanceResponse;
};

export type CancelInstanceResponse2 = CancelInstanceResponses[keyof CancelInstanceResponses];

export type UpgradeInstanceData = {
    body: UpgradeInstanceRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the instance
         */
        instanceId: number;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}/upgrade';
};

export type UpgradeInstanceResponses = {
    /**
     * The response will be a JSON object and contains standard instance attributes.
     */
    200: PatchInstanceResponse;
};

export type UpgradeInstanceResponse = UpgradeInstanceResponses[keyof UpgradeInstanceResponses];

export type RetrieveInstancesActionsAuditsListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The identifier of the instancesActions.
         */
        instanceId?: number;
        /**
         * The requestId of the API call which led to the change.
         */
        requestId?: string;
        /**
         * changedBy of the user which led to the change.
         */
        changedBy?: string;
        /**
         * Start of search time range.
         */
        startDate?: string;
        /**
         * End of search time range.
         */
        endDate?: string;
    };
    url: '/v1/compute/instances/actions/audits';
};

export type RetrieveInstancesActionsAuditsListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of action audits triggered via the API.
     */
    200: ListInstancesActionsAuditResponse;
};

export type RetrieveInstancesActionsAuditsListResponse = RetrieveInstancesActionsAuditsListResponses[keyof RetrieveInstancesActionsAuditsListResponses];

export type RetrieveInstancesAuditsListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The identifier of the instances.
         */
        instanceId?: number;
        /**
         * The requestId of the API call which led to the change.
         */
        requestId?: string;
        /**
         * changedBy of the user which led to the change.
         */
        changedBy?: string;
        /**
         * Start of search time range.
         */
        startDate?: string;
        /**
         * End of search time range.
         */
        endDate?: string;
    };
    url: '/v1/compute/instances/audits';
};

export type RetrieveInstancesAuditsListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of instances audits triggered via the API.
     */
    200: ListInstancesAuditResponse;
};

export type RetrieveInstancesAuditsListResponse = RetrieveInstancesAuditsListResponses[keyof RetrieveInstancesAuditsListResponses];

export type RetrieveImageListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The name of the image
         */
        name?: string;
        /**
         * Flag indicating that image is either a standard (true) or a custom image (false)
         */
        standardImage?: boolean;
        /**
         * full text search on image name or image os type
         */
        search?: string;
    };
    url: '/v1/compute/images';
};

export type RetrieveImageListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of images.
     */
    200: ListImageResponse;
};

export type RetrieveImageListResponse = RetrieveImageListResponses[keyof RetrieveImageListResponses];

export type CreateCustomImageData = {
    body: CreateCustomImageRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: never;
    url: '/v1/compute/images';
};

export type CreateCustomImageErrors = {
    /**
     * The response will be an error in case the provided image URL is not in .qcow2 or .iso format
     */
    415: CreateCustomImageFailResponse;
};

export type CreateCustomImageError = CreateCustomImageErrors[keyof CreateCustomImageErrors];

export type CreateCustomImageResponses = {
    /**
     * The response will be a JSON object and contains standard custom image attributes
     */
    201: CreateCustomImageResponse;
};

export type CreateCustomImageResponse2 = CreateCustomImageResponses[keyof CreateCustomImageResponses];

export type DeleteImageData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the image
         */
        imageId: string;
    };
    query?: never;
    url: '/v1/compute/images/{imageId}';
};

export type DeleteImageResponses = {
    /**
     * Response body has no content
     */
    204: void;
};

export type DeleteImageResponse = DeleteImageResponses[keyof DeleteImageResponses];

export type RetrieveImageData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the image
         */
        imageId: string;
    };
    query?: never;
    url: '/v1/compute/images/{imageId}';
};

export type RetrieveImageResponses = {
    /**
     * The response will be a JSON object and contains standard custom image attributes
     */
    200: FindImageResponse;
};

export type RetrieveImageResponse = RetrieveImageResponses[keyof RetrieveImageResponses];

export type UpdateImageData = {
    body: UpdateCustomImageRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the image
         */
        imageId: string;
    };
    query?: never;
    url: '/v1/compute/images/{imageId}';
};

export type UpdateImageResponses = {
    /**
     * The response will be a JSON object and contains standard custom image attributes
     */
    200: UpdateCustomImageResponse;
};

export type UpdateImageResponse = UpdateImageResponses[keyof UpdateImageResponses];

export type RetrieveCustomImagesStatsData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: never;
    url: '/v1/compute/images/stats';
};

export type RetrieveCustomImagesStatsResponses = {
    /**
     * The response will be a JSON object and contains the custom images count, the total available disk space, the used disk space and the free disk space.
     */
    200: CustomImagesStatsResponse;
};

export type RetrieveCustomImagesStatsResponse = RetrieveCustomImagesStatsResponses[keyof RetrieveCustomImagesStatsResponses];

export type RetrieveSnapshotListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the instance
         */
        instanceId: number;
    };
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * Filter as substring match for snapshots names.
         */
        name?: string;
    };
    url: '/v1/compute/instances/{instanceId}/snapshots';
};

export type RetrieveSnapshotListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of snapshots attributes
     */
    200: ListSnapshotResponse;
};

export type RetrieveSnapshotListResponse = RetrieveSnapshotListResponses[keyof RetrieveSnapshotListResponses];

export type CreateSnapshotData = {
    body: CreateSnapshotRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the instance
         */
        instanceId: number;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}/snapshots';
};

export type CreateSnapshotResponses = {
    /**
     * The response will be a JSON object and contains standard snapshot attributes
     */
    201: CreateSnapshotResponse;
};

export type CreateSnapshotResponse2 = CreateSnapshotResponses[keyof CreateSnapshotResponses];

export type DeleteSnapshotData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the instance
         */
        instanceId: number;
        /**
         * The identifier of the snapshot
         */
        snapshotId: string;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}/snapshots/{snapshotId}';
};

export type DeleteSnapshotResponses = {
    /**
     * Response body has no content
     */
    204: void;
};

export type DeleteSnapshotResponse = DeleteSnapshotResponses[keyof DeleteSnapshotResponses];

export type RetrieveSnapshotData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the instance
         */
        instanceId: number;
        /**
         * The identifier of the snapshot
         */
        snapshotId: string;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}/snapshots/{snapshotId}';
};

export type RetrieveSnapshotResponses = {
    /**
     * The response will be a JSON object and contains standard snapshot attributes
     */
    200: FindSnapshotResponse;
};

export type RetrieveSnapshotResponse = RetrieveSnapshotResponses[keyof RetrieveSnapshotResponses];

export type UpdateSnapshotData = {
    body: UpdateSnapshotRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the instance
         */
        instanceId: number;
        /**
         * The identifier of the snapshot
         */
        snapshotId: string;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}/snapshots/{snapshotId}';
};

export type UpdateSnapshotResponses = {
    /**
     * The response will be a JSON object and contains standard snapshot attributes
     */
    200: UpdateSnapshotResponse;
};

export type UpdateSnapshotResponse2 = UpdateSnapshotResponses[keyof UpdateSnapshotResponses];

export type RollbackSnapshotData = {
    body: RollbackSnapshotRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the instance
         */
        instanceId: number;
        /**
         * The identifier of the snapshot
         */
        snapshotId: string;
    };
    query?: never;
    url: '/v1/compute/instances/{instanceId}/snapshots/{snapshotId}/rollback';
};

export type RollbackSnapshotResponses = {
    /**
     * The response will be a JSON object and contains standard snapshot attributes
     */
    200: RollbackSnapshotResponse;
};

export type RollbackSnapshotResponse2 = RollbackSnapshotResponses[keyof RollbackSnapshotResponses];

export type RetrieveImageAuditsListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The identifier of the image.
         */
        imageId?: string;
        /**
         * The requestId of the API call which led to the change.
         */
        requestId?: string;
        /**
         * UserId of the user which led to the change.
         */
        changedBy?: string;
        /**
         * Start of search time range.
         */
        startDate?: string;
        /**
         * End of search time range.
         */
        endDate?: string;
    };
    url: '/v1/compute/images/audits';
};

export type RetrieveImageAuditsListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of custom images audits.
     */
    200: ImageAuditResponse;
};

export type RetrieveImageAuditsListResponse = RetrieveImageAuditsListResponses[keyof RetrieveImageAuditsListResponses];

export type RetrieveSnapshotsAuditsListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The identifier of the instance
         */
        instanceId?: number;
        /**
         * The identifier of the snapshot
         */
        snapshotId?: string;
        /**
         * The requestId of the API call which led to the change
         */
        requestId?: string;
        /**
         * changedBy of the user which led to the change
         */
        changedBy?: string;
        /**
         * Start of search time range.
         */
        startDate?: string;
        /**
         * End of search time range.
         */
        endDate?: string;
    };
    url: '/v1/compute/snapshots/audits';
};

export type RetrieveSnapshotsAuditsListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of snapshots audits triggered via the API.
     */
    200: ListSnapshotsAuditResponse;
};

export type RetrieveSnapshotsAuditsListResponse = RetrieveSnapshotsAuditsListResponses[keyof RetrieveSnapshotsAuditsListResponses];

export type RetrieveObjectStorageListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * Filter for Object Storage locations.
         */
        dataCenterName?: string;
        /**
         * Filter for Object Storage S3 tenantId.
         */
        s3TenantId?: string;
        /**
         * Filter for Object Storage by regions. Available regions: EU, US-central, SIN
         */
        region?: string;
        /**
         * Filter for Object Storage by display name.
         */
        displayName?: string;
    };
    url: '/v1/object-storages';
};

export type RetrieveObjectStorageListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of object storages.
     */
    200: ListObjectStorageResponse;
};

export type RetrieveObjectStorageListResponse = RetrieveObjectStorageListResponses[keyof RetrieveObjectStorageListResponses];

export type CreateObjectStorageData = {
    body: CreateObjectStorageRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: never;
    url: '/v1/object-storages';
};

export type CreateObjectStorageResponses = {
    /**
     * The response will be a JSON object and contains standard object storage attributes.
     */
    201: CreateObjectStorageResponse;
};

export type CreateObjectStorageResponse2 = CreateObjectStorageResponses[keyof CreateObjectStorageResponses];

export type RetrieveDataCenterListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * Filter as match for data centers.
         */
        slug?: string;
        /**
         * Filter for Object Storages regions.
         */
        name?: string;
        /**
         * Filter for Object Storage region names.
         */
        regionName?: string;
        /**
         * Filter for Object Storage region slugs.
         */
        regionSlug?: string;
    };
    url: '/v1/data-centers';
};

export type RetrieveDataCenterListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of data centers.
     */
    200: ListDataCenterResponse;
};

export type RetrieveDataCenterListResponse = RetrieveDataCenterListResponses[keyof RetrieveDataCenterListResponses];

export type RetrieveObjectStorageData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the object storage.
         */
        objectStorageId: string;
    };
    query?: never;
    url: '/v1/object-storages/{objectStorageId}';
};

export type RetrieveObjectStorageResponses = {
    /**
     * The response will be a JSON object and contains standard object storage attributes.
     */
    200: FindObjectStorageResponse;
};

export type RetrieveObjectStorageResponse = RetrieveObjectStorageResponses[keyof RetrieveObjectStorageResponses];

export type UpdateObjectStorageData = {
    body: PatchObjectStorageRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the object storage.
         */
        objectStorageId: string;
    };
    query?: never;
    url: '/v1/object-storages/{objectStorageId}';
};

export type UpdateObjectStorageResponses = {
    /**
     * The response will be a JSON object and contains the object storage with updated display name.
     */
    200: CancelObjectStorageResponse;
};

export type UpdateObjectStorageResponse = UpdateObjectStorageResponses[keyof UpdateObjectStorageResponses];

export type UpgradeObjectStorageData = {
    body: UpgradeObjectStorageRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the object storage.
         */
        objectStorageId: string;
    };
    query?: never;
    url: '/v1/object-storages/{objectStorageId}/resize';
};

export type UpgradeObjectStorageResponses = {
    /**
     * The response will be a JSON object and contains standard object storage attributes.
     */
    200: UpgradeObjectStorageResponse;
};

export type UpgradeObjectStorageResponse2 = UpgradeObjectStorageResponses[keyof UpgradeObjectStorageResponses];

export type RetrieveObjectStoragesStatsData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the object storage.
         */
        objectStorageId: string;
    };
    query?: never;
    url: '/v1/object-storages/{objectStorageId}/stats';
};

export type RetrieveObjectStoragesStatsResponses = {
    /**
     * The response will be a JSON object and contains the object storages count the current object storages and give the current quota maximum.
     */
    200: ObjectStoragesStatsResponse;
};

export type RetrieveObjectStoragesStatsResponse = RetrieveObjectStoragesStatsResponses[keyof RetrieveObjectStoragesStatsResponses];

export type CancelObjectStorageData = {
    body: CancelObjectStorageRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the object storage.
         */
        objectStorageId: string;
    };
    query?: never;
    url: '/v1/object-storages/{objectStorageId}/cancel';
};

export type CancelObjectStorageResponses = {
    /**
     * The response will be a JSON object and contains the objectstorageId and cancel date.
     */
    200: CancelObjectStorageResponse;
};

export type CancelObjectStorageResponse2 = CancelObjectStorageResponses[keyof CancelObjectStorageResponses];

export type CreateTicketData = {
    body: CreateTicketRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: never;
    url: '/v1/create-ticket';
};

export type CreateTicketResponses = {
    /**
     * The response will be a JSON object and contains standard support ticket attributes.
     */
    201: CreateTicketResponse;
};

export type CreateTicketResponse2 = CreateTicketResponses[keyof CreateTicketResponses];

export type RetrieveObjectStorageAuditsListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The identifier of the object storage.
         */
        objectStorageId?: string;
        /**
         * The requestId of the API call which led to the change.
         */
        requestId?: string;
        /**
         * changedBy of the user which led to the change.
         */
        changedBy?: string;
        /**
         * Start of search time range.
         */
        startDate?: string;
        /**
         * End of search time range.
         */
        endDate?: string;
    };
    url: '/v1/object-storages/audits';
};

export type RetrieveObjectStorageAuditsListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of object storage audits.
     */
    200: ListObjectStorageAuditResponse;
};

export type RetrieveObjectStorageAuditsListResponse = RetrieveObjectStorageAuditsListResponses[keyof RetrieveObjectStorageAuditsListResponses];

export type RetrievePrivateNetworkListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The name of the Private Network
         */
        name?: string;
        /**
         * Comma separated instances identifiers
         */
        instanceIds?: string;
        /**
         * The slug of the region where your Private Network is located
         */
        region?: string;
        /**
         * The data center where your Private Network is located
         */
        dataCenter?: string;
    };
    url: '/v1/private-networks';
};

export type RetrievePrivateNetworkListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of Private Networks.
     */
    200: ListPrivateNetworkResponse;
};

export type RetrievePrivateNetworkListResponse = RetrievePrivateNetworkListResponses[keyof RetrievePrivateNetworkListResponses];

export type CreatePrivateNetworkData = {
    body: CreatePrivateNetworkRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: never;
    url: '/v1/private-networks';
};

export type CreatePrivateNetworkResponses = {
    /**
     * The response will be a JSON object and contains standard Private Network attributes.
     */
    201: CreatePrivateNetworkResponse;
};

export type CreatePrivateNetworkResponse2 = CreatePrivateNetworkResponses[keyof CreatePrivateNetworkResponses];

export type DeletePrivateNetworkData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the Private Network
         */
        privateNetworkId: number;
    };
    query?: never;
    url: '/v1/private-networks/{privateNetworkId}';
};

export type DeletePrivateNetworkResponses = {
    /**
     * Response body has no content
     */
    204: void;
};

export type DeletePrivateNetworkResponse = DeletePrivateNetworkResponses[keyof DeletePrivateNetworkResponses];

export type RetrievePrivateNetworkData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the Private Network
         */
        privateNetworkId: number;
    };
    query?: never;
    url: '/v1/private-networks/{privateNetworkId}';
};

export type RetrievePrivateNetworkResponses = {
    /**
     * The response will be a JSON object and contains standard Private Network attributes.
     */
    200: FindPrivateNetworkResponse;
};

export type RetrievePrivateNetworkResponse = RetrievePrivateNetworkResponses[keyof RetrievePrivateNetworkResponses];

export type PatchPrivateNetworkData = {
    body: PatchPrivateNetworkRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the Private Network
         */
        privateNetworkId: number;
    };
    query?: never;
    url: '/v1/private-networks/{privateNetworkId}';
};

export type PatchPrivateNetworkResponses = {
    /**
     * The response will be a JSON object and contains standard Private Network attributes.
     */
    200: PatchPrivateNetworkResponse;
};

export type PatchPrivateNetworkResponse2 = PatchPrivateNetworkResponses[keyof PatchPrivateNetworkResponses];

export type UnassignInstancePrivateNetworkData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the Private Network
         */
        privateNetworkId: number;
        /**
         * The identifier of the instance
         */
        instanceId: number;
    };
    query?: never;
    url: '/v1/private-networks/{privateNetworkId}/instances/{instanceId}';
};

export type UnassignInstancePrivateNetworkResponses = {
    /**
     * The instance will be removed from the Private Network
     */
    201: UnassignInstancePrivateNetworkResponse;
};

export type UnassignInstancePrivateNetworkResponse2 = UnassignInstancePrivateNetworkResponses[keyof UnassignInstancePrivateNetworkResponses];

export type AssignInstancePrivateNetworkData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the Private Network
         */
        privateNetworkId: number;
        /**
         * The identifier of the instance
         */
        instanceId: number;
    };
    query?: never;
    url: '/v1/private-networks/{privateNetworkId}/instances/{instanceId}';
};

export type AssignInstancePrivateNetworkResponses = {
    /**
     * The instance will be added to the Private Network
     */
    201: AssignInstancePrivateNetworkResponse;
};

export type AssignInstancePrivateNetworkResponse2 = AssignInstancePrivateNetworkResponses[keyof AssignInstancePrivateNetworkResponses];

export type RetrievePrivateNetworkAuditsListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The identifier of the Private Network
         */
        privateNetworkId?: number;
        /**
         * The requestId of the API call which led to the change.
         */
        requestId?: string;
        /**
         * User name which did the change.
         */
        changedBy?: string;
        /**
         * Start of search time range.
         */
        startDate?: string;
        /**
         * End of search time range.
         */
        endDate?: string;
    };
    url: '/v1/private-networks/audits';
};

export type RetrievePrivateNetworkAuditsListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of Private Networks audits.
     */
    200: ListPrivateNetworkAuditResponse;
};

export type RetrievePrivateNetworkAuditsListResponse = RetrievePrivateNetworkAuditsListResponses[keyof RetrievePrivateNetworkAuditsListResponses];

export type RetrieveSecretListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * Filter secrets by name
         */
        name?: string;
        /**
         * Filter secrets by type
         */
        type?: 'password' | 'ssh';
    };
    url: '/v1/secrets';
};

export type RetrieveSecretListResponses = {
    /**
     * The response will be a JSON object and contains a list of secrets.
     */
    200: ListSecretResponse;
};

export type RetrieveSecretListResponse = RetrieveSecretListResponses[keyof RetrieveSecretListResponses];

export type CreateSecretData = {
    body: CreateSecretRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: never;
    url: '/v1/secrets';
};

export type CreateSecretResponses = {
    /**
     * The response will be a JSON object and contains standard secret attributes.
     */
    201: CreateSecretResponse;
};

export type CreateSecretResponse2 = CreateSecretResponses[keyof CreateSecretResponses];

export type DeleteSecretData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The id of the secret
         */
        secretId: number;
    };
    query?: never;
    url: '/v1/secrets/{secretId}';
};

export type DeleteSecretResponses = {
    /**
     * Response body has no content
     */
    204: void;
};

export type DeleteSecretResponse = DeleteSecretResponses[keyof DeleteSecretResponses];

export type RetrieveSecretData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The id of the secret
         */
        secretId: number;
    };
    query?: never;
    url: '/v1/secrets/{secretId}';
};

export type RetrieveSecretResponses = {
    /**
     * The response will be a JSON object and contains standard secret attributes.
     */
    200: FindSecretResponse;
};

export type RetrieveSecretResponse = RetrieveSecretResponses[keyof RetrieveSecretResponses];

export type UpdateSecretData = {
    body: UpdateSecretRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The id of the secret
         */
        secretId: number;
    };
    query?: never;
    url: '/v1/secrets/{secretId}';
};

export type UpdateSecretResponses = {
    /**
     * The response will be a JSON object and contains standard secret attributes.
     */
    200: UpdateSecretResponse;
};

export type UpdateSecretResponse2 = UpdateSecretResponses[keyof UpdateSecretResponses];

export type RetrieveSecretAuditsListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The id of the secret.
         */
        secretId?: number;
        /**
         * The requestId of the API call which led to the change.
         */
        requestId?: string;
        /**
         * changedBy of the user which led to the change.
         */
        changedBy?: string;
        /**
         * Start of search time range.
         */
        startDate?: string;
        /**
         * End of search time range.
         */
        endDate?: string;
    };
    url: '/v1/secrets/audits';
};

export type RetrieveSecretAuditsListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of secrets audits.
     */
    200: ListSecretAuditResponse;
};

export type RetrieveSecretAuditsListResponse = RetrieveSecretAuditsListResponses[keyof RetrieveSecretAuditsListResponses];

export type RetrieveVipListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The resourceId using the VIP.
         */
        resourceId?: string;
        /**
         * The resourceType using the VIP.
         */
        resourceType?: 'instances' | 'bare-metal' | 'null';
        /**
         * The name of the resource.
         */
        resourceName?: string;
        /**
         * The display name of the resource.
         */
        resourceDisplayName?: string;
        /**
         * The VIP version.
         */
        ipVersion?: 'v4';
        /**
         * Comma separated IPs
         */
        ips?: string;
        /**
         * The ip of the VIP
         */
        ip?: string;
        /**
         * The VIP type.
         */
        type?: 'additional' | 'floating';
        /**
         * The dataCenter of the VIP.
         */
        dataCenter?: string;
        /**
         * The region of the VIP.
         */
        region?: string;
    };
    url: '/v1/vips';
};

export type RetrieveVipListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of Vips.
     */
    200: ListVipResponse;
};

export type RetrieveVipListResponse = RetrieveVipListResponses[keyof RetrieveVipListResponses];

export type RetrieveVipData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The ip of the VIP
         */
        ip: string;
    };
    query?: never;
    url: '/v1/vips/{ip}';
};

export type RetrieveVipResponses = {
    /**
     * The response will be a JSON object and contains standard VIP attributes.
     */
    200: FindVipResponse;
};

export type RetrieveVipResponse = RetrieveVipResponses[keyof RetrieveVipResponses];

export type UnassignIpData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the resource
         */
        resourceId: number;
        /**
         * The ip you want to add the instance to
         */
        ip: string;
        /**
         * The resourceType using the VIP.
         */
        resourceType: 'instances' | 'bare-metal';
    };
    query?: never;
    url: '/v1/vips/{ip}/{resourceType}/{resourceId}';
};

export type UnassignIpResponses = {
    /**
     * No Content
     */
    204: void;
};

export type UnassignIpResponse = UnassignIpResponses[keyof UnassignIpResponses];

export type AssignIpData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the resource
         */
        resourceId: number;
        /**
         * The ip you want to add the instance to
         */
        ip: string;
        /**
         * The resourceType using the VIP.
         */
        resourceType: 'instances' | 'bare-metal';
    };
    query?: never;
    url: '/v1/vips/{ip}/{resourceType}/{resourceId}';
};

export type AssignIpResponses = {
    /**
     * The response will be a JSON object and contains standard VIP attributes.
     */
    200: AssignVipResponse;
};

export type AssignIpResponse = AssignIpResponses[keyof AssignIpResponses];

export type RetrieveVipAuditsListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The identifier of the VIP.
         */
        vipId?: string;
        /**
         * The requestId of the API call which led to the change.
         */
        requestId?: string;
        /**
         * User name which did the change.
         */
        changedBy?: string;
        /**
         * Start of search time range.
         */
        startDate?: string;
        /**
         * End of search time range.
         */
        endDate?: string;
    };
    url: '/v1/vips/audits';
};

export type RetrieveVipAuditsListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of VIPs audits.
     */
    200: ListVipAuditResponse;
};

export type RetrieveVipAuditsListResponse = RetrieveVipAuditsListResponses[keyof RetrieveVipAuditsListResponses];

export type RetrieveTagListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * Filter as substring match for tag names. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per tag.
         */
        name?: string;
    };
    url: '/v1/tags';
};

export type RetrieveTagListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of tags.
     */
    200: ListTagResponse;
};

export type RetrieveTagListResponse = RetrieveTagListResponses[keyof RetrieveTagListResponses];

export type CreateTagData = {
    body: CreateTagRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: never;
    url: '/v1/tags';
};

export type CreateTagResponses = {
    /**
     * The response will be a JSON object and contains standard tag attributes.
     */
    201: CreateTagResponse;
};

export type CreateTagResponse2 = CreateTagResponses[keyof CreateTagResponses];

export type DeleteTagData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the tag
         */
        tagId: number;
    };
    query?: never;
    url: '/v1/tags/{tagId}';
};

export type DeleteTagResponses = {
    /**
     * Response body has no content
     */
    204: void;
};

export type DeleteTagResponse = DeleteTagResponses[keyof DeleteTagResponses];

export type RetrieveTagData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the tag
         */
        tagId: number;
    };
    query?: never;
    url: '/v1/tags/{tagId}';
};

export type RetrieveTagResponses = {
    /**
     * The response will be a JSON object and contains standard tag attributes.
     */
    200: FindTagResponse;
};

export type RetrieveTagResponse = RetrieveTagResponses[keyof RetrieveTagResponses];

export type UpdateTagData = {
    body: UpdateTagRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the tag
         */
        tagId: number;
    };
    query?: never;
    url: '/v1/tags/{tagId}';
};

export type UpdateTagResponses = {
    /**
     * The response will be a JSON object and contains standard tag attributes.
     */
    200: UpdateTagResponse;
};

export type UpdateTagResponse2 = UpdateTagResponses[keyof UpdateTagResponses];

export type RetrieveAssignmentListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the tag.
         */
        tagId: number;
    };
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * Filter as substring match for assignment resource type. Resource type is one of `instance|image|object-storage`.
         */
        resourceType?: string;
    };
    url: '/v1/tags/{tagId}/assignments';
};

export type RetrieveAssignmentListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of tag assignments.
     */
    200: ListAssignmentResponse;
};

export type RetrieveAssignmentListResponse = RetrieveAssignmentListResponses[keyof RetrieveAssignmentListResponses];

export type DeleteAssignmentData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the tag.
         */
        tagId: number;
        /**
         * The identifier of the resource type. Resource type is one of `instance|image|object-storage`.
         */
        resourceType: string;
        /**
         * The identifier of the resource id
         */
        resourceId: string;
    };
    query?: never;
    url: '/v1/tags/{tagId}/assignments/{resourceType}/{resourceId}';
};

export type DeleteAssignmentResponses = {
    /**
     * Response body has no content
     */
    204: void;
};

export type DeleteAssignmentResponse = DeleteAssignmentResponses[keyof DeleteAssignmentResponses];

export type RetrieveAssignmentData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the tag.
         */
        tagId: number;
        /**
         * The identifier of the resource type. Resource type is one of `instance|image|object-storage`.
         */
        resourceType: string;
        /**
         * The identifier of the resource id
         */
        resourceId: string;
    };
    query?: never;
    url: '/v1/tags/{tagId}/assignments/{resourceType}/{resourceId}';
};

export type RetrieveAssignmentResponses = {
    /**
     * The response will be a JSON object and contains standard tag assignment attributes.
     */
    200: FindAssignmentResponse;
};

export type RetrieveAssignmentResponse = RetrieveAssignmentResponses[keyof RetrieveAssignmentResponses];

export type CreateAssignmentData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the tag.
         */
        tagId: number;
        /**
         * The identifier of the resource type. Resource type is one of `instance|image|object-storage`.
         */
        resourceType: string;
        /**
         * The identifier of the resource id
         */
        resourceId: string;
    };
    query?: never;
    url: '/v1/tags/{tagId}/assignments/{resourceType}/{resourceId}';
};

export type CreateAssignmentResponses = {
    /**
     * The response will be a JSON object and contains standard tag assignment attributes.
     */
    201: CreateAssignmentResponse;
};

export type CreateAssignmentResponse2 = CreateAssignmentResponses[keyof CreateAssignmentResponses];

export type RetrieveTagAuditsListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The identifier of the tag.
         */
        tagId?: number;
        /**
         * The requestId of the API call which led to the change.
         */
        requestId?: string;
        /**
         * UserId of the user which led to the change.
         */
        changedBy?: string;
        /**
         * Start of search time range.
         */
        startDate?: string;
        /**
         * End of search time range.
         */
        endDate?: string;
    };
    url: '/v1/tags/audits';
};

export type RetrieveTagAuditsListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of tags audits.
     */
    200: ListTagAuditsResponse;
};

export type RetrieveTagAuditsListResponse = RetrieveTagAuditsListResponses[keyof RetrieveTagAuditsListResponses];

export type RetrieveAssignmentsAuditsListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The identifier of the tag.
         */
        tagId?: number;
        /**
         * The identifier of the resource.
         */
        resourceId?: string;
        /**
         * The requestId of the API call which led to the change.
         */
        requestId?: string;
        /**
         * UserId of the user which led to the change.
         */
        changedBy?: string;
        /**
         * Start of search time range.
         */
        startDate?: string;
        /**
         * End of search time range.
         */
        endDate?: string;
    };
    url: '/v1/tags/assignments/audits';
};

export type RetrieveAssignmentsAuditsListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of assignments audits.
     */
    200: ListAssignmentAuditsResponse;
};

export type RetrieveAssignmentsAuditsListResponse = RetrieveAssignmentsAuditsListResponses[keyof RetrieveAssignmentsAuditsListResponses];

export type RetrieveUserListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * Filter as substring match for user emails.
         */
        email?: string;
        /**
         * Filter if user is enabled or not.
         */
        enabled?: boolean;
        /**
         * Filter if user is owner or not.
         */
        owner?: boolean;
    };
    url: '/v1/users';
};

export type RetrieveUserListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of users.
     */
    200: ListUserResponse;
};

export type RetrieveUserListResponse = RetrieveUserListResponses[keyof RetrieveUserListResponses];

export type CreateUserData = {
    body: CreateUserRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: never;
    url: '/v1/users';
};

export type CreateUserResponses = {
    /**
     * The response will be a JSON object and contains standard user attributes.
     */
    201: CreateUserResponse;
};

export type CreateUserResponse2 = CreateUserResponses[keyof CreateUserResponses];

export type DeleteUserData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the user.
         */
        userId: string;
    };
    query?: never;
    url: '/v1/users/{userId}';
};

export type DeleteUserResponses = {
    /**
     * Response body has no content
     */
    204: void;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type RetrieveUserData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the user.
         */
        userId: string;
    };
    query?: never;
    url: '/v1/users/{userId}';
};

export type RetrieveUserResponses = {
    /**
     * The response will be a JSON object and contains standard user attributes.
     */
    200: FindUserResponse;
};

export type RetrieveUserResponse = RetrieveUserResponses[keyof RetrieveUserResponses];

export type UpdateUserData = {
    body: UpdateUserRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the user.
         */
        userId: string;
    };
    query?: never;
    url: '/v1/users/{userId}';
};

export type UpdateUserResponses = {
    /**
     * The response will be a JSON object and contains standard user attributes.
     */
    200: UpdateUserResponse;
};

export type UpdateUserResponse2 = UpdateUserResponses[keyof UpdateUserResponses];

export type ResetPasswordData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the user.
         */
        userId: string;
    };
    query?: {
        /**
         * The redirect url used for resetting password
         */
        redirectUrl?: string;
    };
    url: '/v1/users/{userId}/reset-password';
};

export type ResetPasswordResponses = {
    /**
     * Response body has no content
     */
    204: void;
};

export type ResetPasswordResponse = ResetPasswordResponses[keyof ResetPasswordResponses];

export type ResendEmailVerificationData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the user.
         */
        userId: string;
    };
    query?: {
        /**
         * The redirect url used for email verification
         */
        redirectUrl?: string;
    };
    url: '/v1/users/{userId}/resend-email-verification';
};

export type ResendEmailVerificationResponses = {
    /**
     * Response body has no content
     */
    204: void;
};

export type ResendEmailVerificationResponse = ResendEmailVerificationResponses[keyof ResendEmailVerificationResponses];

export type RetrieveUserClientData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: never;
    url: '/v1/users/client';
};

export type RetrieveUserClientResponses = {
    /**
     * The response will be a JSON object and contains standard client attributes.
     */
    200: FindClientResponse;
};

export type RetrieveUserClientResponse = RetrieveUserClientResponses[keyof RetrieveUserClientResponses];

export type GenerateClientSecretData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: never;
    url: '/v1/users/client/secret';
};

export type GenerateClientSecretResponses = {
    /**
     * The response will be a JSON object and contains new client secret.
     */
    200: GenerateClientSecretResponse;
};

export type GenerateClientSecretResponse2 = GenerateClientSecretResponses[keyof GenerateClientSecretResponses];

export type RetrieveUserIsPasswordSetData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * The user ID for checking if password is set for him
         */
        userId?: string;
    };
    url: '/v1/users/is-password-set';
};

export type RetrieveUserIsPasswordSetResponses = {
    /**
     * The response will be a JSON object and contains standard user attributes.
     */
    200: FindUserIsPasswordSetResponse;
};

export type RetrieveUserIsPasswordSetResponse = RetrieveUserIsPasswordSetResponses[keyof RetrieveUserIsPasswordSetResponses];

export type RetrieveRoleListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The name of the role
         */
        name?: string;
        /**
         * The name of api
         */
        apiName?: string;
        /**
         * The name of the tag
         */
        tagName?: string;
        /**
         * The type of the tag. Can be either `default` or `custom`
         */
        type?: string;
    };
    url: '/v1/roles';
};

export type RetrieveRoleListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of roles.
     */
    200: ListRoleResponse;
};

export type RetrieveRoleListResponse = RetrieveRoleListResponses[keyof RetrieveRoleListResponses];

export type CreateRoleData = {
    body: CreateRoleRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: never;
    url: '/v1/roles';
};

export type CreateRoleResponses = {
    /**
     * The response will be a JSON object and contains standard role attributes.
     */
    201: CreateRoleResponse;
};

export type CreateRoleResponse2 = CreateRoleResponses[keyof CreateRoleResponses];

export type DeleteRoleData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the role
         */
        roleId: number;
    };
    query?: never;
    url: '/v1/roles/{roleId}';
};

export type DeleteRoleResponses = {
    /**
     * Response body has no content
     */
    204: void;
};

export type DeleteRoleResponse = DeleteRoleResponses[keyof DeleteRoleResponses];

export type RetrieveRoleData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the role
         */
        roleId: number;
    };
    query?: never;
    url: '/v1/roles/{roleId}';
};

export type RetrieveRoleResponses = {
    /**
     * The response will be a JSON object and contains standard role attributes.
     */
    200: FindRoleResponse;
};

export type RetrieveRoleResponse = RetrieveRoleResponses[keyof RetrieveRoleResponses];

export type UpdateRoleData = {
    body: UpdateRoleRequest;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the role
         */
        roleId: number;
    };
    query?: never;
    url: '/v1/roles/{roleId}';
};

export type UpdateRoleResponses = {
    /**
     * The response will be a JSON object and contains standard role attributes.
     */
    200: UpdateRoleResponse;
};

export type UpdateRoleResponse2 = UpdateRoleResponses[keyof UpdateRoleResponses];

export type RetrieveApiPermissionsListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The name of api
         */
        apiName?: string;
    };
    url: '/v1/roles/api-permissions';
};

export type RetrieveApiPermissionsListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of API permissions.
     */
    200: ListApiPermissionResponse;
};

export type RetrieveApiPermissionsListResponse = RetrieveApiPermissionsListResponses[keyof RetrieveApiPermissionsListResponses];

export type ListObjectStorageCredentialsData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the user.
         */
        userId: string;
    };
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The identifier of the S3 object storage
         */
        objectStorageId?: string;
        /**
         * Filter for Object Storage by regions. Available regions: Asia (Singapore), European Union, United States (Central)
         */
        regionName?: string;
        /**
         * Filter for Object Storage by his displayName.
         */
        displayName?: string;
    };
    url: '/v1/users/{userId}/object-storages/credentials';
};

export type ListObjectStorageCredentialsResponses = {
    /**
     * The response will be an array of JSON objects that contains S3 credentials.
     */
    200: ListCredentialResponse;
};

export type ListObjectStorageCredentialsResponse = ListObjectStorageCredentialsResponses[keyof ListObjectStorageCredentialsResponses];

export type GetObjectStorageCredentialsData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the user.
         */
        userId: string;
        /**
         * The identifier of the S3 object storage
         */
        objectStorageId: string;
        /**
         * The ID of the object storage credential
         */
        credentialId: number;
    };
    query?: never;
    url: '/v1/users/{userId}/object-storages/{objectStorageId}/credentials/{credentialId}';
};

export type GetObjectStorageCredentialsResponses = {
    /**
     * The response will be a JSON object and contains S3 credentials.
     */
    200: FindCredentialResponse;
};

export type GetObjectStorageCredentialsResponse = GetObjectStorageCredentialsResponses[keyof GetObjectStorageCredentialsResponses];

export type RegenerateObjectStorageCredentialsData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path: {
        /**
         * The identifier of the user.
         */
        userId: string;
        /**
         * The identifier of the S3 object storage
         */
        objectStorageId: string;
        /**
         * The ID of the object storage credential
         */
        credentialId: number;
    };
    query?: never;
    url: '/v1/users/{userId}/object-storages/{objectStorageId}/credentials/{credentialId}';
};

export type RegenerateObjectStorageCredentialsResponses = {
    /**
     * The response will be a JSON object and contains object storage S3 credentials.
     */
    200: FindCredentialResponse;
};

export type RegenerateObjectStorageCredentialsResponse = RegenerateObjectStorageCredentialsResponses[keyof RegenerateObjectStorageCredentialsResponses];

export type RetrieveUserAuditsListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The identifier of the user.
         */
        userId?: string;
        /**
         * The requestId of the API call which led to the change.
         */
        requestId?: string;
        /**
         * changedBy of the user which led to the change.
         */
        changedBy?: string;
        /**
         * Start of search time range.
         */
        startDate?: string;
        /**
         * End of search time range.
         */
        endDate?: string;
    };
    url: '/v1/users/audits';
};

export type RetrieveUserAuditsListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of users audits.
     */
    200: ListUserAuditResponse;
};

export type RetrieveUserAuditsListResponse = RetrieveUserAuditsListResponses[keyof RetrieveUserAuditsListResponses];

export type RetrieveRoleAuditsListData = {
    body?: never;
    headers: {
        /**
         * [Uuid4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) to identify individual requests for support cases. You can use [uuidgenerator](https://www.uuidgenerator.net/version4) to generate them manually.
         */
        'x-request-id': string;
        /**
         * Identifier to trace group of requests.
         */
        'x-trace-id'?: string;
    };
    path?: never;
    query?: {
        /**
         * Number of page to be fetched.
         */
        page?: number;
        /**
         * Number of elements per page.
         */
        size?: number;
        /**
         * Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC`.
         */
        orderBy?: Array<string>;
        /**
         * The identifier of the role.
         */
        roleId?: number;
        /**
         * The requestId of the API call which led to the change.
         */
        requestId?: string;
        /**
         * changedBy of the user which led to the change.
         */
        changedBy?: string;
        /**
         * Start of search time range.
         */
        startDate?: string;
        /**
         * End of search time range.
         */
        endDate?: string;
    };
    url: '/v1/roles/audits';
};

export type RetrieveRoleAuditsListResponses = {
    /**
     * The response will be a JSON object and contains a paginated list of roles audits.
     */
    200: ListRoleAuditResponse;
};

export type RetrieveRoleAuditsListResponse = RetrieveRoleAuditsListResponses[keyof RetrieveRoleAuditsListResponses];

export type ClientOptions = {
    baseUrl: 'https://api.contabo.com' | (string & {});
};